
SVI_lab1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002008  080001ac  080001ac  000101ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  080021b4  080021b4  000121b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080021cc  080021cc  000121cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080021d4  080021d4  000121d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  080021d8  080021d8  000121d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         0000000c  20000000  080021dc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .ccmram       00000000  10000000  10000000  0002000c  2**0
                  CONTENTS
  8 .bss          000000a0  2000000c  2000000c  0002000c  2**2
                  ALLOC
  9 ._user_heap_stack 00000600  200000ac  200000ac  0002000c  2**0
                  ALLOC
 10 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 11 .debug_info   00005845  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev 0000109f  00000000  00000000  00025881  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 000005f8  00000000  00000000  00026920  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000560  00000000  00000000  00026f18  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   00002812  00000000  00000000  00027478  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    00002035  00000000  00000000  00029c8a  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007c  00000000  00000000  0002bcbf  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00001740  00000000  00000000  0002bd3c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	; (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	2000000c 	.word	0x2000000c
 80001c8:	00000000 	.word	0x00000000
 80001cc:	0800219c 	.word	0x0800219c

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	; (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	; (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	; (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	20000010 	.word	0x20000010
 80001e8:	0800219c 	.word	0x0800219c

080001ec <__aeabi_uldivmod>:
 80001ec:	b953      	cbnz	r3, 8000204 <__aeabi_uldivmod+0x18>
 80001ee:	b94a      	cbnz	r2, 8000204 <__aeabi_uldivmod+0x18>
 80001f0:	2900      	cmp	r1, #0
 80001f2:	bf08      	it	eq
 80001f4:	2800      	cmpeq	r0, #0
 80001f6:	bf1c      	itt	ne
 80001f8:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001fc:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000200:	f000 b97a 	b.w	80004f8 <__aeabi_idiv0>
 8000204:	f1ad 0c08 	sub.w	ip, sp, #8
 8000208:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800020c:	f000 f806 	bl	800021c <__udivmoddi4>
 8000210:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000214:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000218:	b004      	add	sp, #16
 800021a:	4770      	bx	lr

0800021c <__udivmoddi4>:
 800021c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000220:	468c      	mov	ip, r1
 8000222:	460d      	mov	r5, r1
 8000224:	4604      	mov	r4, r0
 8000226:	9e08      	ldr	r6, [sp, #32]
 8000228:	2b00      	cmp	r3, #0
 800022a:	d151      	bne.n	80002d0 <__udivmoddi4+0xb4>
 800022c:	428a      	cmp	r2, r1
 800022e:	4617      	mov	r7, r2
 8000230:	d96d      	bls.n	800030e <__udivmoddi4+0xf2>
 8000232:	fab2 fe82 	clz	lr, r2
 8000236:	f1be 0f00 	cmp.w	lr, #0
 800023a:	d00b      	beq.n	8000254 <__udivmoddi4+0x38>
 800023c:	f1ce 0c20 	rsb	ip, lr, #32
 8000240:	fa01 f50e 	lsl.w	r5, r1, lr
 8000244:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000248:	fa02 f70e 	lsl.w	r7, r2, lr
 800024c:	ea4c 0c05 	orr.w	ip, ip, r5
 8000250:	fa00 f40e 	lsl.w	r4, r0, lr
 8000254:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 8000258:	0c25      	lsrs	r5, r4, #16
 800025a:	fbbc f8fa 	udiv	r8, ip, sl
 800025e:	fa1f f987 	uxth.w	r9, r7
 8000262:	fb0a cc18 	mls	ip, sl, r8, ip
 8000266:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 800026a:	fb08 f309 	mul.w	r3, r8, r9
 800026e:	42ab      	cmp	r3, r5
 8000270:	d90a      	bls.n	8000288 <__udivmoddi4+0x6c>
 8000272:	19ed      	adds	r5, r5, r7
 8000274:	f108 32ff 	add.w	r2, r8, #4294967295	; 0xffffffff
 8000278:	f080 8123 	bcs.w	80004c2 <__udivmoddi4+0x2a6>
 800027c:	42ab      	cmp	r3, r5
 800027e:	f240 8120 	bls.w	80004c2 <__udivmoddi4+0x2a6>
 8000282:	f1a8 0802 	sub.w	r8, r8, #2
 8000286:	443d      	add	r5, r7
 8000288:	1aed      	subs	r5, r5, r3
 800028a:	b2a4      	uxth	r4, r4
 800028c:	fbb5 f0fa 	udiv	r0, r5, sl
 8000290:	fb0a 5510 	mls	r5, sl, r0, r5
 8000294:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000298:	fb00 f909 	mul.w	r9, r0, r9
 800029c:	45a1      	cmp	r9, r4
 800029e:	d909      	bls.n	80002b4 <__udivmoddi4+0x98>
 80002a0:	19e4      	adds	r4, r4, r7
 80002a2:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80002a6:	f080 810a 	bcs.w	80004be <__udivmoddi4+0x2a2>
 80002aa:	45a1      	cmp	r9, r4
 80002ac:	f240 8107 	bls.w	80004be <__udivmoddi4+0x2a2>
 80002b0:	3802      	subs	r0, #2
 80002b2:	443c      	add	r4, r7
 80002b4:	eba4 0409 	sub.w	r4, r4, r9
 80002b8:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80002bc:	2100      	movs	r1, #0
 80002be:	2e00      	cmp	r6, #0
 80002c0:	d061      	beq.n	8000386 <__udivmoddi4+0x16a>
 80002c2:	fa24 f40e 	lsr.w	r4, r4, lr
 80002c6:	2300      	movs	r3, #0
 80002c8:	6034      	str	r4, [r6, #0]
 80002ca:	6073      	str	r3, [r6, #4]
 80002cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002d0:	428b      	cmp	r3, r1
 80002d2:	d907      	bls.n	80002e4 <__udivmoddi4+0xc8>
 80002d4:	2e00      	cmp	r6, #0
 80002d6:	d054      	beq.n	8000382 <__udivmoddi4+0x166>
 80002d8:	2100      	movs	r1, #0
 80002da:	e886 0021 	stmia.w	r6, {r0, r5}
 80002de:	4608      	mov	r0, r1
 80002e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002e4:	fab3 f183 	clz	r1, r3
 80002e8:	2900      	cmp	r1, #0
 80002ea:	f040 808e 	bne.w	800040a <__udivmoddi4+0x1ee>
 80002ee:	42ab      	cmp	r3, r5
 80002f0:	d302      	bcc.n	80002f8 <__udivmoddi4+0xdc>
 80002f2:	4282      	cmp	r2, r0
 80002f4:	f200 80fa 	bhi.w	80004ec <__udivmoddi4+0x2d0>
 80002f8:	1a84      	subs	r4, r0, r2
 80002fa:	eb65 0503 	sbc.w	r5, r5, r3
 80002fe:	2001      	movs	r0, #1
 8000300:	46ac      	mov	ip, r5
 8000302:	2e00      	cmp	r6, #0
 8000304:	d03f      	beq.n	8000386 <__udivmoddi4+0x16a>
 8000306:	e886 1010 	stmia.w	r6, {r4, ip}
 800030a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800030e:	b912      	cbnz	r2, 8000316 <__udivmoddi4+0xfa>
 8000310:	2701      	movs	r7, #1
 8000312:	fbb7 f7f2 	udiv	r7, r7, r2
 8000316:	fab7 fe87 	clz	lr, r7
 800031a:	f1be 0f00 	cmp.w	lr, #0
 800031e:	d134      	bne.n	800038a <__udivmoddi4+0x16e>
 8000320:	1beb      	subs	r3, r5, r7
 8000322:	0c3a      	lsrs	r2, r7, #16
 8000324:	fa1f fc87 	uxth.w	ip, r7
 8000328:	2101      	movs	r1, #1
 800032a:	fbb3 f8f2 	udiv	r8, r3, r2
 800032e:	0c25      	lsrs	r5, r4, #16
 8000330:	fb02 3318 	mls	r3, r2, r8, r3
 8000334:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000338:	fb0c f308 	mul.w	r3, ip, r8
 800033c:	42ab      	cmp	r3, r5
 800033e:	d907      	bls.n	8000350 <__udivmoddi4+0x134>
 8000340:	19ed      	adds	r5, r5, r7
 8000342:	f108 30ff 	add.w	r0, r8, #4294967295	; 0xffffffff
 8000346:	d202      	bcs.n	800034e <__udivmoddi4+0x132>
 8000348:	42ab      	cmp	r3, r5
 800034a:	f200 80d1 	bhi.w	80004f0 <__udivmoddi4+0x2d4>
 800034e:	4680      	mov	r8, r0
 8000350:	1aed      	subs	r5, r5, r3
 8000352:	b2a3      	uxth	r3, r4
 8000354:	fbb5 f0f2 	udiv	r0, r5, r2
 8000358:	fb02 5510 	mls	r5, r2, r0, r5
 800035c:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 8000360:	fb0c fc00 	mul.w	ip, ip, r0
 8000364:	45a4      	cmp	ip, r4
 8000366:	d907      	bls.n	8000378 <__udivmoddi4+0x15c>
 8000368:	19e4      	adds	r4, r4, r7
 800036a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800036e:	d202      	bcs.n	8000376 <__udivmoddi4+0x15a>
 8000370:	45a4      	cmp	ip, r4
 8000372:	f200 80b8 	bhi.w	80004e6 <__udivmoddi4+0x2ca>
 8000376:	4618      	mov	r0, r3
 8000378:	eba4 040c 	sub.w	r4, r4, ip
 800037c:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000380:	e79d      	b.n	80002be <__udivmoddi4+0xa2>
 8000382:	4631      	mov	r1, r6
 8000384:	4630      	mov	r0, r6
 8000386:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038a:	f1ce 0420 	rsb	r4, lr, #32
 800038e:	fa05 f30e 	lsl.w	r3, r5, lr
 8000392:	fa07 f70e 	lsl.w	r7, r7, lr
 8000396:	fa20 f804 	lsr.w	r8, r0, r4
 800039a:	0c3a      	lsrs	r2, r7, #16
 800039c:	fa25 f404 	lsr.w	r4, r5, r4
 80003a0:	ea48 0803 	orr.w	r8, r8, r3
 80003a4:	fbb4 f1f2 	udiv	r1, r4, r2
 80003a8:	ea4f 4518 	mov.w	r5, r8, lsr #16
 80003ac:	fb02 4411 	mls	r4, r2, r1, r4
 80003b0:	fa1f fc87 	uxth.w	ip, r7
 80003b4:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 80003b8:	fb01 f30c 	mul.w	r3, r1, ip
 80003bc:	42ab      	cmp	r3, r5
 80003be:	fa00 f40e 	lsl.w	r4, r0, lr
 80003c2:	d909      	bls.n	80003d8 <__udivmoddi4+0x1bc>
 80003c4:	19ed      	adds	r5, r5, r7
 80003c6:	f101 30ff 	add.w	r0, r1, #4294967295	; 0xffffffff
 80003ca:	f080 808a 	bcs.w	80004e2 <__udivmoddi4+0x2c6>
 80003ce:	42ab      	cmp	r3, r5
 80003d0:	f240 8087 	bls.w	80004e2 <__udivmoddi4+0x2c6>
 80003d4:	3902      	subs	r1, #2
 80003d6:	443d      	add	r5, r7
 80003d8:	1aeb      	subs	r3, r5, r3
 80003da:	fa1f f588 	uxth.w	r5, r8
 80003de:	fbb3 f0f2 	udiv	r0, r3, r2
 80003e2:	fb02 3310 	mls	r3, r2, r0, r3
 80003e6:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 80003ea:	fb00 f30c 	mul.w	r3, r0, ip
 80003ee:	42ab      	cmp	r3, r5
 80003f0:	d907      	bls.n	8000402 <__udivmoddi4+0x1e6>
 80003f2:	19ed      	adds	r5, r5, r7
 80003f4:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 80003f8:	d26f      	bcs.n	80004da <__udivmoddi4+0x2be>
 80003fa:	42ab      	cmp	r3, r5
 80003fc:	d96d      	bls.n	80004da <__udivmoddi4+0x2be>
 80003fe:	3802      	subs	r0, #2
 8000400:	443d      	add	r5, r7
 8000402:	1aeb      	subs	r3, r5, r3
 8000404:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000408:	e78f      	b.n	800032a <__udivmoddi4+0x10e>
 800040a:	f1c1 0720 	rsb	r7, r1, #32
 800040e:	fa22 f807 	lsr.w	r8, r2, r7
 8000412:	408b      	lsls	r3, r1
 8000414:	fa05 f401 	lsl.w	r4, r5, r1
 8000418:	ea48 0303 	orr.w	r3, r8, r3
 800041c:	fa20 fe07 	lsr.w	lr, r0, r7
 8000420:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 8000424:	40fd      	lsrs	r5, r7
 8000426:	ea4e 0e04 	orr.w	lr, lr, r4
 800042a:	fbb5 f9fc 	udiv	r9, r5, ip
 800042e:	ea4f 441e 	mov.w	r4, lr, lsr #16
 8000432:	fb0c 5519 	mls	r5, ip, r9, r5
 8000436:	fa1f f883 	uxth.w	r8, r3
 800043a:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 800043e:	fb09 f408 	mul.w	r4, r9, r8
 8000442:	42ac      	cmp	r4, r5
 8000444:	fa02 f201 	lsl.w	r2, r2, r1
 8000448:	fa00 fa01 	lsl.w	sl, r0, r1
 800044c:	d908      	bls.n	8000460 <__udivmoddi4+0x244>
 800044e:	18ed      	adds	r5, r5, r3
 8000450:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000454:	d243      	bcs.n	80004de <__udivmoddi4+0x2c2>
 8000456:	42ac      	cmp	r4, r5
 8000458:	d941      	bls.n	80004de <__udivmoddi4+0x2c2>
 800045a:	f1a9 0902 	sub.w	r9, r9, #2
 800045e:	441d      	add	r5, r3
 8000460:	1b2d      	subs	r5, r5, r4
 8000462:	fa1f fe8e 	uxth.w	lr, lr
 8000466:	fbb5 f0fc 	udiv	r0, r5, ip
 800046a:	fb0c 5510 	mls	r5, ip, r0, r5
 800046e:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 8000472:	fb00 f808 	mul.w	r8, r0, r8
 8000476:	45a0      	cmp	r8, r4
 8000478:	d907      	bls.n	800048a <__udivmoddi4+0x26e>
 800047a:	18e4      	adds	r4, r4, r3
 800047c:	f100 35ff 	add.w	r5, r0, #4294967295	; 0xffffffff
 8000480:	d229      	bcs.n	80004d6 <__udivmoddi4+0x2ba>
 8000482:	45a0      	cmp	r8, r4
 8000484:	d927      	bls.n	80004d6 <__udivmoddi4+0x2ba>
 8000486:	3802      	subs	r0, #2
 8000488:	441c      	add	r4, r3
 800048a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800048e:	eba4 0408 	sub.w	r4, r4, r8
 8000492:	fba0 8902 	umull	r8, r9, r0, r2
 8000496:	454c      	cmp	r4, r9
 8000498:	46c6      	mov	lr, r8
 800049a:	464d      	mov	r5, r9
 800049c:	d315      	bcc.n	80004ca <__udivmoddi4+0x2ae>
 800049e:	d012      	beq.n	80004c6 <__udivmoddi4+0x2aa>
 80004a0:	b156      	cbz	r6, 80004b8 <__udivmoddi4+0x29c>
 80004a2:	ebba 030e 	subs.w	r3, sl, lr
 80004a6:	eb64 0405 	sbc.w	r4, r4, r5
 80004aa:	fa04 f707 	lsl.w	r7, r4, r7
 80004ae:	40cb      	lsrs	r3, r1
 80004b0:	431f      	orrs	r7, r3
 80004b2:	40cc      	lsrs	r4, r1
 80004b4:	6037      	str	r7, [r6, #0]
 80004b6:	6074      	str	r4, [r6, #4]
 80004b8:	2100      	movs	r1, #0
 80004ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004be:	4618      	mov	r0, r3
 80004c0:	e6f8      	b.n	80002b4 <__udivmoddi4+0x98>
 80004c2:	4690      	mov	r8, r2
 80004c4:	e6e0      	b.n	8000288 <__udivmoddi4+0x6c>
 80004c6:	45c2      	cmp	sl, r8
 80004c8:	d2ea      	bcs.n	80004a0 <__udivmoddi4+0x284>
 80004ca:	ebb8 0e02 	subs.w	lr, r8, r2
 80004ce:	eb69 0503 	sbc.w	r5, r9, r3
 80004d2:	3801      	subs	r0, #1
 80004d4:	e7e4      	b.n	80004a0 <__udivmoddi4+0x284>
 80004d6:	4628      	mov	r0, r5
 80004d8:	e7d7      	b.n	800048a <__udivmoddi4+0x26e>
 80004da:	4640      	mov	r0, r8
 80004dc:	e791      	b.n	8000402 <__udivmoddi4+0x1e6>
 80004de:	4681      	mov	r9, r0
 80004e0:	e7be      	b.n	8000460 <__udivmoddi4+0x244>
 80004e2:	4601      	mov	r1, r0
 80004e4:	e778      	b.n	80003d8 <__udivmoddi4+0x1bc>
 80004e6:	3802      	subs	r0, #2
 80004e8:	443c      	add	r4, r7
 80004ea:	e745      	b.n	8000378 <__udivmoddi4+0x15c>
 80004ec:	4608      	mov	r0, r1
 80004ee:	e708      	b.n	8000302 <__udivmoddi4+0xe6>
 80004f0:	f1a8 0802 	sub.w	r8, r8, #2
 80004f4:	443d      	add	r5, r7
 80004f6:	e72b      	b.n	8000350 <__udivmoddi4+0x134>

080004f8 <__aeabi_idiv0>:
 80004f8:	4770      	bx	lr
 80004fa:	bf00      	nop

080004fc <Reset_HLx_Leds>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
	/*
	 * Reset leds in line HL0..HL7 on board
	 */
	void Reset_HLx_Leds() {
 80004fc:	b580      	push	{r7, lr}
 80004fe:	af00      	add	r7, sp, #0
		 HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8000500:	2200      	movs	r2, #0
 8000502:	21ff      	movs	r1, #255	; 0xff
 8000504:	4802      	ldr	r0, [pc, #8]	; (8000510 <Reset_HLx_Leds+0x14>)
 8000506:	f000 fda5 	bl	8001054 <HAL_GPIO_WritePin>
			                           |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);
	}
 800050a:	bf00      	nop
 800050c:	bd80      	pop	{r7, pc}
 800050e:	bf00      	nop
 8000510:	40020000 	.word	0x40020000

08000514 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000514:	b580      	push	{r7, lr}
 8000516:	b082      	sub	sp, #8
 8000518:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800051a:	f000 fa79 	bl	8000a10 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800051e:	f000 f86f 	bl	8000600 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000522:	f000 f927 	bl	8000774 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000526:	f000 f8d1 	bl	80006cc <MX_USART1_UART_Init>
  MX_USART6_UART_Init();
 800052a:	f000 f8f9 	bl	8000720 <MX_USART6_UART_Init>
  {

    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	    for(uint8_t i = 0; i < 6; i++) {
 800052e:	2300      	movs	r3, #0
 8000530:	71fb      	strb	r3, [r7, #7]
 8000532:	e05e      	b.n	80005f2 <main+0xde>
	    	switch(i) {
 8000534:	79fb      	ldrb	r3, [r7, #7]
 8000536:	2b05      	cmp	r3, #5
 8000538:	d856      	bhi.n	80005e8 <main+0xd4>
 800053a:	a201      	add	r2, pc, #4	; (adr r2, 8000540 <main+0x2c>)
 800053c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000540:	08000559 	.word	0x08000559
 8000544:	08000571 	.word	0x08000571
 8000548:	08000589 	.word	0x08000589
 800054c:	080005a1 	.word	0x080005a1
 8000550:	080005b9 	.word	0x080005b9
 8000554:	080005d1 	.word	0x080005d1
	    	case 0:
	    		Reset_HLx_Leds();
 8000558:	f7ff ffd0 	bl	80004fc <Reset_HLx_Leds>
	    		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7|GPIO_PIN_6
 800055c:	2201      	movs	r2, #1
 800055e:	21f0      	movs	r1, #240	; 0xf0
 8000560:	4826      	ldr	r0, [pc, #152]	; (80005fc <main+0xe8>)
 8000562:	f000 fd77 	bl	8001054 <HAL_GPIO_WritePin>
	    								|GPIO_PIN_5|GPIO_PIN_4, GPIO_PIN_SET);
	    		HAL_Delay(1000);
 8000566:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800056a:	f000 fac3 	bl	8000af4 <HAL_Delay>
	    		break;
 800056e:	e03d      	b.n	80005ec <main+0xd8>
	    	case 1:
	    		Reset_HLx_Leds();
 8000570:	f7ff ffc4 	bl	80004fc <Reset_HLx_Leds>
	    		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7|GPIO_PIN_5
 8000574:	2201      	movs	r2, #1
 8000576:	21aa      	movs	r1, #170	; 0xaa
 8000578:	4820      	ldr	r0, [pc, #128]	; (80005fc <main+0xe8>)
 800057a:	f000 fd6b 	bl	8001054 <HAL_GPIO_WritePin>
	    								|GPIO_PIN_3|GPIO_PIN_1, GPIO_PIN_SET);
	    		HAL_Delay(1000);
 800057e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000582:	f000 fab7 	bl	8000af4 <HAL_Delay>
				break;
 8000586:	e031      	b.n	80005ec <main+0xd8>
	    	case 2:
	    		Reset_HLx_Leds();
 8000588:	f7ff ffb8 	bl	80004fc <Reset_HLx_Leds>
	    		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7|GPIO_PIN_6
 800058c:	2201      	movs	r2, #1
 800058e:	21cc      	movs	r1, #204	; 0xcc
 8000590:	481a      	ldr	r0, [pc, #104]	; (80005fc <main+0xe8>)
 8000592:	f000 fd5f 	bl	8001054 <HAL_GPIO_WritePin>
	    								|GPIO_PIN_3|GPIO_PIN_2, GPIO_PIN_SET);
	    		HAL_Delay(1000);
 8000596:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800059a:	f000 faab 	bl	8000af4 <HAL_Delay>
				break;
 800059e:	e025      	b.n	80005ec <main+0xd8>
	    	case 3:
	    		Reset_HLx_Leds();
 80005a0:	f7ff ffac 	bl	80004fc <Reset_HLx_Leds>
	    		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7|GPIO_PIN_6
 80005a4:	2201      	movs	r2, #1
 80005a6:	21e7      	movs	r1, #231	; 0xe7
 80005a8:	4814      	ldr	r0, [pc, #80]	; (80005fc <main+0xe8>)
 80005aa:	f000 fd53 	bl	8001054 <HAL_GPIO_WritePin>
	    								|GPIO_PIN_5|GPIO_PIN_2
										|GPIO_PIN_1|GPIO_PIN_0, GPIO_PIN_SET);
	    		HAL_Delay(1000);
 80005ae:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80005b2:	f000 fa9f 	bl	8000af4 <HAL_Delay>
				break;
 80005b6:	e019      	b.n	80005ec <main+0xd8>
	    	case 4:
	    		Reset_HLx_Leds();
 80005b8:	f7ff ffa0 	bl	80004fc <Reset_HLx_Leds>
	    		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5|GPIO_PIN_4
 80005bc:	2201      	movs	r2, #1
 80005be:	2133      	movs	r1, #51	; 0x33
 80005c0:	480e      	ldr	r0, [pc, #56]	; (80005fc <main+0xe8>)
 80005c2:	f000 fd47 	bl	8001054 <HAL_GPIO_WritePin>
	    			                    |GPIO_PIN_1|GPIO_PIN_0, GPIO_PIN_SET);
	    		HAL_Delay(1000);
 80005c6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80005ca:	f000 fa93 	bl	8000af4 <HAL_Delay>
				break;
 80005ce:	e00d      	b.n	80005ec <main+0xd8>
	    	case 5:
	    		Reset_HLx_Leds();
 80005d0:	f7ff ff94 	bl	80004fc <Reset_HLx_Leds>
	    		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7|GPIO_PIN_6
 80005d4:	2201      	movs	r2, #1
 80005d6:	21c3      	movs	r1, #195	; 0xc3
 80005d8:	4808      	ldr	r0, [pc, #32]	; (80005fc <main+0xe8>)
 80005da:	f000 fd3b 	bl	8001054 <HAL_GPIO_WritePin>
										|GPIO_PIN_1|GPIO_PIN_0, GPIO_PIN_SET);
	    		HAL_Delay(1000);
 80005de:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80005e2:	f000 fa87 	bl	8000af4 <HAL_Delay>
				break;
 80005e6:	e001      	b.n	80005ec <main+0xd8>
	    	default:
	    		Reset_HLx_Leds();
 80005e8:	f7ff ff88 	bl	80004fc <Reset_HLx_Leds>
	    for(uint8_t i = 0; i < 6; i++) {
 80005ec:	79fb      	ldrb	r3, [r7, #7]
 80005ee:	3301      	adds	r3, #1
 80005f0:	71fb      	strb	r3, [r7, #7]
 80005f2:	79fb      	ldrb	r3, [r7, #7]
 80005f4:	2b05      	cmp	r3, #5
 80005f6:	d99d      	bls.n	8000534 <main+0x20>
 80005f8:	e799      	b.n	800052e <main+0x1a>
 80005fa:	bf00      	nop
 80005fc:	40020000 	.word	0x40020000

08000600 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000600:	b580      	push	{r7, lr}
 8000602:	b094      	sub	sp, #80	; 0x50
 8000604:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000606:	f107 0320 	add.w	r3, r7, #32
 800060a:	2230      	movs	r2, #48	; 0x30
 800060c:	2100      	movs	r1, #0
 800060e:	4618      	mov	r0, r3
 8000610:	f001 fdbc 	bl	800218c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000614:	f107 030c 	add.w	r3, r7, #12
 8000618:	2200      	movs	r2, #0
 800061a:	601a      	str	r2, [r3, #0]
 800061c:	605a      	str	r2, [r3, #4]
 800061e:	609a      	str	r2, [r3, #8]
 8000620:	60da      	str	r2, [r3, #12]
 8000622:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000624:	2300      	movs	r3, #0
 8000626:	60bb      	str	r3, [r7, #8]
 8000628:	4a26      	ldr	r2, [pc, #152]	; (80006c4 <SystemClock_Config+0xc4>)
 800062a:	4b26      	ldr	r3, [pc, #152]	; (80006c4 <SystemClock_Config+0xc4>)
 800062c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800062e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000632:	6413      	str	r3, [r2, #64]	; 0x40
 8000634:	4b23      	ldr	r3, [pc, #140]	; (80006c4 <SystemClock_Config+0xc4>)
 8000636:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000638:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800063c:	60bb      	str	r3, [r7, #8]
 800063e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000640:	2300      	movs	r3, #0
 8000642:	607b      	str	r3, [r7, #4]
 8000644:	4a20      	ldr	r2, [pc, #128]	; (80006c8 <SystemClock_Config+0xc8>)
 8000646:	4b20      	ldr	r3, [pc, #128]	; (80006c8 <SystemClock_Config+0xc8>)
 8000648:	681b      	ldr	r3, [r3, #0]
 800064a:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800064e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000652:	6013      	str	r3, [r2, #0]
 8000654:	4b1c      	ldr	r3, [pc, #112]	; (80006c8 <SystemClock_Config+0xc8>)
 8000656:	681b      	ldr	r3, [r3, #0]
 8000658:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800065c:	607b      	str	r3, [r7, #4]
 800065e:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000660:	2302      	movs	r3, #2
 8000662:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000664:	2301      	movs	r3, #1
 8000666:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000668:	2310      	movs	r3, #16
 800066a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800066c:	2300      	movs	r3, #0
 800066e:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000670:	f107 0320 	add.w	r3, r7, #32
 8000674:	4618      	mov	r0, r3
 8000676:	f000 fd07 	bl	8001088 <HAL_RCC_OscConfig>
 800067a:	4603      	mov	r3, r0
 800067c:	2b00      	cmp	r3, #0
 800067e:	d001      	beq.n	8000684 <SystemClock_Config+0x84>
  {
    Error_Handler();
 8000680:	f000 f8dc 	bl	800083c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000684:	230f      	movs	r3, #15
 8000686:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000688:	2300      	movs	r3, #0
 800068a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800068c:	2300      	movs	r3, #0
 800068e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000690:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000694:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000696:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800069a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800069c:	f107 030c 	add.w	r3, r7, #12
 80006a0:	2100      	movs	r1, #0
 80006a2:	4618      	mov	r0, r3
 80006a4:	f000 ff60 	bl	8001568 <HAL_RCC_ClockConfig>
 80006a8:	4603      	mov	r3, r0
 80006aa:	2b00      	cmp	r3, #0
 80006ac:	d001      	beq.n	80006b2 <SystemClock_Config+0xb2>
  {
    Error_Handler();
 80006ae:	f000 f8c5 	bl	800083c <Error_Handler>
  }
  HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_HSI, RCC_MCODIV_1);
 80006b2:	2200      	movs	r2, #0
 80006b4:	2100      	movs	r1, #0
 80006b6:	2000      	movs	r0, #0
 80006b8:	f001 f83c 	bl	8001734 <HAL_RCC_MCOConfig>
}
 80006bc:	bf00      	nop
 80006be:	3750      	adds	r7, #80	; 0x50
 80006c0:	46bd      	mov	sp, r7
 80006c2:	bd80      	pop	{r7, pc}
 80006c4:	40023800 	.word	0x40023800
 80006c8:	40007000 	.word	0x40007000

080006cc <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80006cc:	b580      	push	{r7, lr}
 80006ce:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80006d0:	4b11      	ldr	r3, [pc, #68]	; (8000718 <MX_USART1_UART_Init+0x4c>)
 80006d2:	4a12      	ldr	r2, [pc, #72]	; (800071c <MX_USART1_UART_Init+0x50>)
 80006d4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80006d6:	4b10      	ldr	r3, [pc, #64]	; (8000718 <MX_USART1_UART_Init+0x4c>)
 80006d8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80006dc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80006de:	4b0e      	ldr	r3, [pc, #56]	; (8000718 <MX_USART1_UART_Init+0x4c>)
 80006e0:	2200      	movs	r2, #0
 80006e2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80006e4:	4b0c      	ldr	r3, [pc, #48]	; (8000718 <MX_USART1_UART_Init+0x4c>)
 80006e6:	2200      	movs	r2, #0
 80006e8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80006ea:	4b0b      	ldr	r3, [pc, #44]	; (8000718 <MX_USART1_UART_Init+0x4c>)
 80006ec:	2200      	movs	r2, #0
 80006ee:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80006f0:	4b09      	ldr	r3, [pc, #36]	; (8000718 <MX_USART1_UART_Init+0x4c>)
 80006f2:	220c      	movs	r2, #12
 80006f4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006f6:	4b08      	ldr	r3, [pc, #32]	; (8000718 <MX_USART1_UART_Init+0x4c>)
 80006f8:	2200      	movs	r2, #0
 80006fa:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80006fc:	4b06      	ldr	r3, [pc, #24]	; (8000718 <MX_USART1_UART_Init+0x4c>)
 80006fe:	2200      	movs	r2, #0
 8000700:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000702:	4805      	ldr	r0, [pc, #20]	; (8000718 <MX_USART1_UART_Init+0x4c>)
 8000704:	f001 f968 	bl	80019d8 <HAL_UART_Init>
 8000708:	4603      	mov	r3, r0
 800070a:	2b00      	cmp	r3, #0
 800070c:	d001      	beq.n	8000712 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800070e:	f000 f895 	bl	800083c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000712:	bf00      	nop
 8000714:	bd80      	pop	{r7, pc}
 8000716:	bf00      	nop
 8000718:	20000028 	.word	0x20000028
 800071c:	40011000 	.word	0x40011000

08000720 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8000720:	b580      	push	{r7, lr}
 8000722:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8000724:	4b11      	ldr	r3, [pc, #68]	; (800076c <MX_USART6_UART_Init+0x4c>)
 8000726:	4a12      	ldr	r2, [pc, #72]	; (8000770 <MX_USART6_UART_Init+0x50>)
 8000728:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 800072a:	4b10      	ldr	r3, [pc, #64]	; (800076c <MX_USART6_UART_Init+0x4c>)
 800072c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000730:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8000732:	4b0e      	ldr	r3, [pc, #56]	; (800076c <MX_USART6_UART_Init+0x4c>)
 8000734:	2200      	movs	r2, #0
 8000736:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8000738:	4b0c      	ldr	r3, [pc, #48]	; (800076c <MX_USART6_UART_Init+0x4c>)
 800073a:	2200      	movs	r2, #0
 800073c:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 800073e:	4b0b      	ldr	r3, [pc, #44]	; (800076c <MX_USART6_UART_Init+0x4c>)
 8000740:	2200      	movs	r2, #0
 8000742:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8000744:	4b09      	ldr	r3, [pc, #36]	; (800076c <MX_USART6_UART_Init+0x4c>)
 8000746:	220c      	movs	r2, #12
 8000748:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800074a:	4b08      	ldr	r3, [pc, #32]	; (800076c <MX_USART6_UART_Init+0x4c>)
 800074c:	2200      	movs	r2, #0
 800074e:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8000750:	4b06      	ldr	r3, [pc, #24]	; (800076c <MX_USART6_UART_Init+0x4c>)
 8000752:	2200      	movs	r2, #0
 8000754:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8000756:	4805      	ldr	r0, [pc, #20]	; (800076c <MX_USART6_UART_Init+0x4c>)
 8000758:	f001 f93e 	bl	80019d8 <HAL_UART_Init>
 800075c:	4603      	mov	r3, r0
 800075e:	2b00      	cmp	r3, #0
 8000760:	d001      	beq.n	8000766 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8000762:	f000 f86b 	bl	800083c <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8000766:	bf00      	nop
 8000768:	bd80      	pop	{r7, pc}
 800076a:	bf00      	nop
 800076c:	20000068 	.word	0x20000068
 8000770:	40011400 	.word	0x40011400

08000774 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000774:	b580      	push	{r7, lr}
 8000776:	b088      	sub	sp, #32
 8000778:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800077a:	f107 030c 	add.w	r3, r7, #12
 800077e:	2200      	movs	r2, #0
 8000780:	601a      	str	r2, [r3, #0]
 8000782:	605a      	str	r2, [r3, #4]
 8000784:	609a      	str	r2, [r3, #8]
 8000786:	60da      	str	r2, [r3, #12]
 8000788:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800078a:	2300      	movs	r3, #0
 800078c:	60bb      	str	r3, [r7, #8]
 800078e:	4a29      	ldr	r2, [pc, #164]	; (8000834 <MX_GPIO_Init+0xc0>)
 8000790:	4b28      	ldr	r3, [pc, #160]	; (8000834 <MX_GPIO_Init+0xc0>)
 8000792:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000794:	f043 0301 	orr.w	r3, r3, #1
 8000798:	6313      	str	r3, [r2, #48]	; 0x30
 800079a:	4b26      	ldr	r3, [pc, #152]	; (8000834 <MX_GPIO_Init+0xc0>)
 800079c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800079e:	f003 0301 	and.w	r3, r3, #1
 80007a2:	60bb      	str	r3, [r7, #8]
 80007a4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007a6:	2300      	movs	r3, #0
 80007a8:	607b      	str	r3, [r7, #4]
 80007aa:	4a22      	ldr	r2, [pc, #136]	; (8000834 <MX_GPIO_Init+0xc0>)
 80007ac:	4b21      	ldr	r3, [pc, #132]	; (8000834 <MX_GPIO_Init+0xc0>)
 80007ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007b0:	f043 0304 	orr.w	r3, r3, #4
 80007b4:	6313      	str	r3, [r2, #48]	; 0x30
 80007b6:	4b1f      	ldr	r3, [pc, #124]	; (8000834 <MX_GPIO_Init+0xc0>)
 80007b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ba:	f003 0304 	and.w	r3, r3, #4
 80007be:	607b      	str	r3, [r7, #4]
 80007c0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 80007c2:	2200      	movs	r2, #0
 80007c4:	21ff      	movs	r1, #255	; 0xff
 80007c6:	481c      	ldr	r0, [pc, #112]	; (8000838 <MX_GPIO_Init+0xc4>)
 80007c8:	f000 fc44 	bl	8001054 <HAL_GPIO_WritePin>
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);

  /*Configure GPIO pins : PA0 PA1 PA2 PA3
                           PA4 PA5 PA6 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 80007cc:	23ff      	movs	r3, #255	; 0xff
 80007ce:	60fb      	str	r3, [r7, #12]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007d0:	2301      	movs	r3, #1
 80007d2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007d4:	2300      	movs	r3, #0
 80007d6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007d8:	2300      	movs	r3, #0
 80007da:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007dc:	f107 030c 	add.w	r3, r7, #12
 80007e0:	4619      	mov	r1, r3
 80007e2:	4815      	ldr	r0, [pc, #84]	; (8000838 <MX_GPIO_Init+0xc4>)
 80007e4:	f000 fa8c 	bl	8000d00 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 80007e8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80007ec:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007ee:	2302      	movs	r3, #2
 80007f0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007f2:	2300      	movs	r3, #0
 80007f4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007f6:	2300      	movs	r3, #0
 80007f8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 80007fa:	2300      	movs	r3, #0
 80007fc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007fe:	f107 030c 	add.w	r3, r7, #12
 8000802:	4619      	mov	r1, r3
 8000804:	480c      	ldr	r0, [pc, #48]	; (8000838 <MX_GPIO_Init+0xc4>)
 8000806:	f000 fa7b 	bl	8000d00 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800080a:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800080e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000810:	2302      	movs	r3, #2
 8000812:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000814:	2300      	movs	r3, #0
 8000816:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000818:	2303      	movs	r3, #3
 800081a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800081c:	230a      	movs	r3, #10
 800081e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000820:	f107 030c 	add.w	r3, r7, #12
 8000824:	4619      	mov	r1, r3
 8000826:	4804      	ldr	r0, [pc, #16]	; (8000838 <MX_GPIO_Init+0xc4>)
 8000828:	f000 fa6a 	bl	8000d00 <HAL_GPIO_Init>

}
 800082c:	bf00      	nop
 800082e:	3720      	adds	r7, #32
 8000830:	46bd      	mov	sp, r7
 8000832:	bd80      	pop	{r7, pc}
 8000834:	40023800 	.word	0x40023800
 8000838:	40020000 	.word	0x40020000

0800083c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800083c:	b480      	push	{r7}
 800083e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000840:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000842:	e7fe      	b.n	8000842 <Error_Handler+0x6>

08000844 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000844:	b480      	push	{r7}
 8000846:	b083      	sub	sp, #12
 8000848:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800084a:	2300      	movs	r3, #0
 800084c:	607b      	str	r3, [r7, #4]
 800084e:	4a10      	ldr	r2, [pc, #64]	; (8000890 <HAL_MspInit+0x4c>)
 8000850:	4b0f      	ldr	r3, [pc, #60]	; (8000890 <HAL_MspInit+0x4c>)
 8000852:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000854:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000858:	6453      	str	r3, [r2, #68]	; 0x44
 800085a:	4b0d      	ldr	r3, [pc, #52]	; (8000890 <HAL_MspInit+0x4c>)
 800085c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800085e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000862:	607b      	str	r3, [r7, #4]
 8000864:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000866:	2300      	movs	r3, #0
 8000868:	603b      	str	r3, [r7, #0]
 800086a:	4a09      	ldr	r2, [pc, #36]	; (8000890 <HAL_MspInit+0x4c>)
 800086c:	4b08      	ldr	r3, [pc, #32]	; (8000890 <HAL_MspInit+0x4c>)
 800086e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000870:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000874:	6413      	str	r3, [r2, #64]	; 0x40
 8000876:	4b06      	ldr	r3, [pc, #24]	; (8000890 <HAL_MspInit+0x4c>)
 8000878:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800087a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800087e:	603b      	str	r3, [r7, #0]
 8000880:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000882:	bf00      	nop
 8000884:	370c      	adds	r7, #12
 8000886:	46bd      	mov	sp, r7
 8000888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800088c:	4770      	bx	lr
 800088e:	bf00      	nop
 8000890:	40023800 	.word	0x40023800

08000894 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000894:	b580      	push	{r7, lr}
 8000896:	b08c      	sub	sp, #48	; 0x30
 8000898:	af00      	add	r7, sp, #0
 800089a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800089c:	f107 031c 	add.w	r3, r7, #28
 80008a0:	2200      	movs	r2, #0
 80008a2:	601a      	str	r2, [r3, #0]
 80008a4:	605a      	str	r2, [r3, #4]
 80008a6:	609a      	str	r2, [r3, #8]
 80008a8:	60da      	str	r2, [r3, #12]
 80008aa:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80008ac:	687b      	ldr	r3, [r7, #4]
 80008ae:	681b      	ldr	r3, [r3, #0]
 80008b0:	4a32      	ldr	r2, [pc, #200]	; (800097c <HAL_UART_MspInit+0xe8>)
 80008b2:	4293      	cmp	r3, r2
 80008b4:	d12d      	bne.n	8000912 <HAL_UART_MspInit+0x7e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80008b6:	2300      	movs	r3, #0
 80008b8:	61bb      	str	r3, [r7, #24]
 80008ba:	4a31      	ldr	r2, [pc, #196]	; (8000980 <HAL_UART_MspInit+0xec>)
 80008bc:	4b30      	ldr	r3, [pc, #192]	; (8000980 <HAL_UART_MspInit+0xec>)
 80008be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008c0:	f043 0310 	orr.w	r3, r3, #16
 80008c4:	6453      	str	r3, [r2, #68]	; 0x44
 80008c6:	4b2e      	ldr	r3, [pc, #184]	; (8000980 <HAL_UART_MspInit+0xec>)
 80008c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008ca:	f003 0310 	and.w	r3, r3, #16
 80008ce:	61bb      	str	r3, [r7, #24]
 80008d0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008d2:	2300      	movs	r3, #0
 80008d4:	617b      	str	r3, [r7, #20]
 80008d6:	4a2a      	ldr	r2, [pc, #168]	; (8000980 <HAL_UART_MspInit+0xec>)
 80008d8:	4b29      	ldr	r3, [pc, #164]	; (8000980 <HAL_UART_MspInit+0xec>)
 80008da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008dc:	f043 0301 	orr.w	r3, r3, #1
 80008e0:	6313      	str	r3, [r2, #48]	; 0x30
 80008e2:	4b27      	ldr	r3, [pc, #156]	; (8000980 <HAL_UART_MspInit+0xec>)
 80008e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008e6:	f003 0301 	and.w	r3, r3, #1
 80008ea:	617b      	str	r3, [r7, #20]
 80008ec:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80008ee:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80008f2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008f4:	2302      	movs	r3, #2
 80008f6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008f8:	2300      	movs	r3, #0
 80008fa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008fc:	2303      	movs	r3, #3
 80008fe:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000900:	2307      	movs	r3, #7
 8000902:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000904:	f107 031c 	add.w	r3, r7, #28
 8000908:	4619      	mov	r1, r3
 800090a:	481e      	ldr	r0, [pc, #120]	; (8000984 <HAL_UART_MspInit+0xf0>)
 800090c:	f000 f9f8 	bl	8000d00 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8000910:	e030      	b.n	8000974 <HAL_UART_MspInit+0xe0>
  else if(huart->Instance==USART6)
 8000912:	687b      	ldr	r3, [r7, #4]
 8000914:	681b      	ldr	r3, [r3, #0]
 8000916:	4a1c      	ldr	r2, [pc, #112]	; (8000988 <HAL_UART_MspInit+0xf4>)
 8000918:	4293      	cmp	r3, r2
 800091a:	d12b      	bne.n	8000974 <HAL_UART_MspInit+0xe0>
    __HAL_RCC_USART6_CLK_ENABLE();
 800091c:	2300      	movs	r3, #0
 800091e:	613b      	str	r3, [r7, #16]
 8000920:	4a17      	ldr	r2, [pc, #92]	; (8000980 <HAL_UART_MspInit+0xec>)
 8000922:	4b17      	ldr	r3, [pc, #92]	; (8000980 <HAL_UART_MspInit+0xec>)
 8000924:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000926:	f043 0320 	orr.w	r3, r3, #32
 800092a:	6453      	str	r3, [r2, #68]	; 0x44
 800092c:	4b14      	ldr	r3, [pc, #80]	; (8000980 <HAL_UART_MspInit+0xec>)
 800092e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000930:	f003 0320 	and.w	r3, r3, #32
 8000934:	613b      	str	r3, [r7, #16]
 8000936:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000938:	2300      	movs	r3, #0
 800093a:	60fb      	str	r3, [r7, #12]
 800093c:	4a10      	ldr	r2, [pc, #64]	; (8000980 <HAL_UART_MspInit+0xec>)
 800093e:	4b10      	ldr	r3, [pc, #64]	; (8000980 <HAL_UART_MspInit+0xec>)
 8000940:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000942:	f043 0304 	orr.w	r3, r3, #4
 8000946:	6313      	str	r3, [r2, #48]	; 0x30
 8000948:	4b0d      	ldr	r3, [pc, #52]	; (8000980 <HAL_UART_MspInit+0xec>)
 800094a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800094c:	f003 0304 	and.w	r3, r3, #4
 8000950:	60fb      	str	r3, [r7, #12]
 8000952:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000954:	23c0      	movs	r3, #192	; 0xc0
 8000956:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000958:	2302      	movs	r3, #2
 800095a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800095c:	2300      	movs	r3, #0
 800095e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000960:	2303      	movs	r3, #3
 8000962:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8000964:	2308      	movs	r3, #8
 8000966:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000968:	f107 031c 	add.w	r3, r7, #28
 800096c:	4619      	mov	r1, r3
 800096e:	4807      	ldr	r0, [pc, #28]	; (800098c <HAL_UART_MspInit+0xf8>)
 8000970:	f000 f9c6 	bl	8000d00 <HAL_GPIO_Init>
}
 8000974:	bf00      	nop
 8000976:	3730      	adds	r7, #48	; 0x30
 8000978:	46bd      	mov	sp, r7
 800097a:	bd80      	pop	{r7, pc}
 800097c:	40011000 	.word	0x40011000
 8000980:	40023800 	.word	0x40023800
 8000984:	40020000 	.word	0x40020000
 8000988:	40011400 	.word	0x40011400
 800098c:	40020800 	.word	0x40020800

08000990 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000990:	b480      	push	{r7}
 8000992:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000994:	e7fe      	b.n	8000994 <NMI_Handler+0x4>

08000996 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000996:	b480      	push	{r7}
 8000998:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800099a:	e7fe      	b.n	800099a <HardFault_Handler+0x4>

0800099c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800099c:	b480      	push	{r7}
 800099e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80009a0:	e7fe      	b.n	80009a0 <MemManage_Handler+0x4>

080009a2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80009a2:	b480      	push	{r7}
 80009a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80009a6:	e7fe      	b.n	80009a6 <BusFault_Handler+0x4>

080009a8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80009a8:	b480      	push	{r7}
 80009aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80009ac:	e7fe      	b.n	80009ac <UsageFault_Handler+0x4>

080009ae <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80009ae:	b480      	push	{r7}
 80009b0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80009b2:	bf00      	nop
 80009b4:	46bd      	mov	sp, r7
 80009b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ba:	4770      	bx	lr

080009bc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80009bc:	b480      	push	{r7}
 80009be:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009c0:	bf00      	nop
 80009c2:	46bd      	mov	sp, r7
 80009c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c8:	4770      	bx	lr

080009ca <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80009ca:	b480      	push	{r7}
 80009cc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80009ce:	bf00      	nop
 80009d0:	46bd      	mov	sp, r7
 80009d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d6:	4770      	bx	lr

080009d8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80009d8:	b580      	push	{r7, lr}
 80009da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80009dc:	f000 f86a 	bl	8000ab4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80009e0:	bf00      	nop
 80009e2:	bd80      	pop	{r7, pc}

080009e4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80009e4:	b480      	push	{r7}
 80009e6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80009e8:	4a08      	ldr	r2, [pc, #32]	; (8000a0c <SystemInit+0x28>)
 80009ea:	4b08      	ldr	r3, [pc, #32]	; (8000a0c <SystemInit+0x28>)
 80009ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80009f0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80009f4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80009f8:	4b04      	ldr	r3, [pc, #16]	; (8000a0c <SystemInit+0x28>)
 80009fa:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80009fe:	609a      	str	r2, [r3, #8]
#endif
}
 8000a00:	bf00      	nop
 8000a02:	46bd      	mov	sp, r7
 8000a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a08:	4770      	bx	lr
 8000a0a:	bf00      	nop
 8000a0c:	e000ed00 	.word	0xe000ed00

08000a10 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a10:	b580      	push	{r7, lr}
 8000a12:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000a14:	4a0e      	ldr	r2, [pc, #56]	; (8000a50 <HAL_Init+0x40>)
 8000a16:	4b0e      	ldr	r3, [pc, #56]	; (8000a50 <HAL_Init+0x40>)
 8000a18:	681b      	ldr	r3, [r3, #0]
 8000a1a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000a1e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000a20:	4a0b      	ldr	r2, [pc, #44]	; (8000a50 <HAL_Init+0x40>)
 8000a22:	4b0b      	ldr	r3, [pc, #44]	; (8000a50 <HAL_Init+0x40>)
 8000a24:	681b      	ldr	r3, [r3, #0]
 8000a26:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000a2a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a2c:	4a08      	ldr	r2, [pc, #32]	; (8000a50 <HAL_Init+0x40>)
 8000a2e:	4b08      	ldr	r3, [pc, #32]	; (8000a50 <HAL_Init+0x40>)
 8000a30:	681b      	ldr	r3, [r3, #0]
 8000a32:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000a36:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a38:	2003      	movs	r0, #3
 8000a3a:	f000 f92d 	bl	8000c98 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000a3e:	2000      	movs	r0, #0
 8000a40:	f000 f808 	bl	8000a54 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000a44:	f7ff fefe 	bl	8000844 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000a48:	2300      	movs	r3, #0
}
 8000a4a:	4618      	mov	r0, r3
 8000a4c:	bd80      	pop	{r7, pc}
 8000a4e:	bf00      	nop
 8000a50:	40023c00 	.word	0x40023c00

08000a54 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a54:	b580      	push	{r7, lr}
 8000a56:	b082      	sub	sp, #8
 8000a58:	af00      	add	r7, sp, #0
 8000a5a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000a5c:	4b12      	ldr	r3, [pc, #72]	; (8000aa8 <HAL_InitTick+0x54>)
 8000a5e:	681a      	ldr	r2, [r3, #0]
 8000a60:	4b12      	ldr	r3, [pc, #72]	; (8000aac <HAL_InitTick+0x58>)
 8000a62:	781b      	ldrb	r3, [r3, #0]
 8000a64:	4619      	mov	r1, r3
 8000a66:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a6a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000a6e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a72:	4618      	mov	r0, r3
 8000a74:	f000 f937 	bl	8000ce6 <HAL_SYSTICK_Config>
 8000a78:	4603      	mov	r3, r0
 8000a7a:	2b00      	cmp	r3, #0
 8000a7c:	d001      	beq.n	8000a82 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000a7e:	2301      	movs	r3, #1
 8000a80:	e00e      	b.n	8000aa0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a82:	687b      	ldr	r3, [r7, #4]
 8000a84:	2b0f      	cmp	r3, #15
 8000a86:	d80a      	bhi.n	8000a9e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a88:	2200      	movs	r2, #0
 8000a8a:	6879      	ldr	r1, [r7, #4]
 8000a8c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000a90:	f000 f90d 	bl	8000cae <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000a94:	4a06      	ldr	r2, [pc, #24]	; (8000ab0 <HAL_InitTick+0x5c>)
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	e000      	b.n	8000aa0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000a9e:	2301      	movs	r3, #1
}
 8000aa0:	4618      	mov	r0, r3
 8000aa2:	3708      	adds	r7, #8
 8000aa4:	46bd      	mov	sp, r7
 8000aa6:	bd80      	pop	{r7, pc}
 8000aa8:	20000000 	.word	0x20000000
 8000aac:	20000008 	.word	0x20000008
 8000ab0:	20000004 	.word	0x20000004

08000ab4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ab4:	b480      	push	{r7}
 8000ab6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ab8:	4b06      	ldr	r3, [pc, #24]	; (8000ad4 <HAL_IncTick+0x20>)
 8000aba:	781b      	ldrb	r3, [r3, #0]
 8000abc:	461a      	mov	r2, r3
 8000abe:	4b06      	ldr	r3, [pc, #24]	; (8000ad8 <HAL_IncTick+0x24>)
 8000ac0:	681b      	ldr	r3, [r3, #0]
 8000ac2:	4413      	add	r3, r2
 8000ac4:	4a04      	ldr	r2, [pc, #16]	; (8000ad8 <HAL_IncTick+0x24>)
 8000ac6:	6013      	str	r3, [r2, #0]
}
 8000ac8:	bf00      	nop
 8000aca:	46bd      	mov	sp, r7
 8000acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad0:	4770      	bx	lr
 8000ad2:	bf00      	nop
 8000ad4:	20000008 	.word	0x20000008
 8000ad8:	200000a8 	.word	0x200000a8

08000adc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000adc:	b480      	push	{r7}
 8000ade:	af00      	add	r7, sp, #0
  return uwTick;
 8000ae0:	4b03      	ldr	r3, [pc, #12]	; (8000af0 <HAL_GetTick+0x14>)
 8000ae2:	681b      	ldr	r3, [r3, #0]
}
 8000ae4:	4618      	mov	r0, r3
 8000ae6:	46bd      	mov	sp, r7
 8000ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aec:	4770      	bx	lr
 8000aee:	bf00      	nop
 8000af0:	200000a8 	.word	0x200000a8

08000af4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000af4:	b580      	push	{r7, lr}
 8000af6:	b084      	sub	sp, #16
 8000af8:	af00      	add	r7, sp, #0
 8000afa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000afc:	f7ff ffee 	bl	8000adc <HAL_GetTick>
 8000b00:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000b02:	687b      	ldr	r3, [r7, #4]
 8000b04:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000b06:	68fb      	ldr	r3, [r7, #12]
 8000b08:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000b0c:	d005      	beq.n	8000b1a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000b0e:	4b09      	ldr	r3, [pc, #36]	; (8000b34 <HAL_Delay+0x40>)
 8000b10:	781b      	ldrb	r3, [r3, #0]
 8000b12:	461a      	mov	r2, r3
 8000b14:	68fb      	ldr	r3, [r7, #12]
 8000b16:	4413      	add	r3, r2
 8000b18:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000b1a:	bf00      	nop
 8000b1c:	f7ff ffde 	bl	8000adc <HAL_GetTick>
 8000b20:	4602      	mov	r2, r0
 8000b22:	68bb      	ldr	r3, [r7, #8]
 8000b24:	1ad2      	subs	r2, r2, r3
 8000b26:	68fb      	ldr	r3, [r7, #12]
 8000b28:	429a      	cmp	r2, r3
 8000b2a:	d3f7      	bcc.n	8000b1c <HAL_Delay+0x28>
  {
  }
}
 8000b2c:	bf00      	nop
 8000b2e:	3710      	adds	r7, #16
 8000b30:	46bd      	mov	sp, r7
 8000b32:	bd80      	pop	{r7, pc}
 8000b34:	20000008 	.word	0x20000008

08000b38 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b38:	b480      	push	{r7}
 8000b3a:	b085      	sub	sp, #20
 8000b3c:	af00      	add	r7, sp, #0
 8000b3e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	f003 0307 	and.w	r3, r3, #7
 8000b46:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b48:	4b0c      	ldr	r3, [pc, #48]	; (8000b7c <__NVIC_SetPriorityGrouping+0x44>)
 8000b4a:	68db      	ldr	r3, [r3, #12]
 8000b4c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b4e:	68ba      	ldr	r2, [r7, #8]
 8000b50:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000b54:	4013      	ands	r3, r2
 8000b56:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000b58:	68fb      	ldr	r3, [r7, #12]
 8000b5a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b5c:	68bb      	ldr	r3, [r7, #8]
 8000b5e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000b60:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000b64:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b68:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b6a:	4a04      	ldr	r2, [pc, #16]	; (8000b7c <__NVIC_SetPriorityGrouping+0x44>)
 8000b6c:	68bb      	ldr	r3, [r7, #8]
 8000b6e:	60d3      	str	r3, [r2, #12]
}
 8000b70:	bf00      	nop
 8000b72:	3714      	adds	r7, #20
 8000b74:	46bd      	mov	sp, r7
 8000b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b7a:	4770      	bx	lr
 8000b7c:	e000ed00 	.word	0xe000ed00

08000b80 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000b80:	b480      	push	{r7}
 8000b82:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b84:	4b04      	ldr	r3, [pc, #16]	; (8000b98 <__NVIC_GetPriorityGrouping+0x18>)
 8000b86:	68db      	ldr	r3, [r3, #12]
 8000b88:	0a1b      	lsrs	r3, r3, #8
 8000b8a:	f003 0307 	and.w	r3, r3, #7
}
 8000b8e:	4618      	mov	r0, r3
 8000b90:	46bd      	mov	sp, r7
 8000b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b96:	4770      	bx	lr
 8000b98:	e000ed00 	.word	0xe000ed00

08000b9c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b9c:	b480      	push	{r7}
 8000b9e:	b083      	sub	sp, #12
 8000ba0:	af00      	add	r7, sp, #0
 8000ba2:	4603      	mov	r3, r0
 8000ba4:	6039      	str	r1, [r7, #0]
 8000ba6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ba8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bac:	2b00      	cmp	r3, #0
 8000bae:	db0a      	blt.n	8000bc6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bb0:	490d      	ldr	r1, [pc, #52]	; (8000be8 <__NVIC_SetPriority+0x4c>)
 8000bb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bb6:	683a      	ldr	r2, [r7, #0]
 8000bb8:	b2d2      	uxtb	r2, r2
 8000bba:	0112      	lsls	r2, r2, #4
 8000bbc:	b2d2      	uxtb	r2, r2
 8000bbe:	440b      	add	r3, r1
 8000bc0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000bc4:	e00a      	b.n	8000bdc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bc6:	4909      	ldr	r1, [pc, #36]	; (8000bec <__NVIC_SetPriority+0x50>)
 8000bc8:	79fb      	ldrb	r3, [r7, #7]
 8000bca:	f003 030f 	and.w	r3, r3, #15
 8000bce:	3b04      	subs	r3, #4
 8000bd0:	683a      	ldr	r2, [r7, #0]
 8000bd2:	b2d2      	uxtb	r2, r2
 8000bd4:	0112      	lsls	r2, r2, #4
 8000bd6:	b2d2      	uxtb	r2, r2
 8000bd8:	440b      	add	r3, r1
 8000bda:	761a      	strb	r2, [r3, #24]
}
 8000bdc:	bf00      	nop
 8000bde:	370c      	adds	r7, #12
 8000be0:	46bd      	mov	sp, r7
 8000be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be6:	4770      	bx	lr
 8000be8:	e000e100 	.word	0xe000e100
 8000bec:	e000ed00 	.word	0xe000ed00

08000bf0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000bf0:	b480      	push	{r7}
 8000bf2:	b089      	sub	sp, #36	; 0x24
 8000bf4:	af00      	add	r7, sp, #0
 8000bf6:	60f8      	str	r0, [r7, #12]
 8000bf8:	60b9      	str	r1, [r7, #8]
 8000bfa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000bfc:	68fb      	ldr	r3, [r7, #12]
 8000bfe:	f003 0307 	and.w	r3, r3, #7
 8000c02:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c04:	69fb      	ldr	r3, [r7, #28]
 8000c06:	f1c3 0307 	rsb	r3, r3, #7
 8000c0a:	2b04      	cmp	r3, #4
 8000c0c:	bf28      	it	cs
 8000c0e:	2304      	movcs	r3, #4
 8000c10:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c12:	69fb      	ldr	r3, [r7, #28]
 8000c14:	3304      	adds	r3, #4
 8000c16:	2b06      	cmp	r3, #6
 8000c18:	d902      	bls.n	8000c20 <NVIC_EncodePriority+0x30>
 8000c1a:	69fb      	ldr	r3, [r7, #28]
 8000c1c:	3b03      	subs	r3, #3
 8000c1e:	e000      	b.n	8000c22 <NVIC_EncodePriority+0x32>
 8000c20:	2300      	movs	r3, #0
 8000c22:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c24:	2201      	movs	r2, #1
 8000c26:	69bb      	ldr	r3, [r7, #24]
 8000c28:	fa02 f303 	lsl.w	r3, r2, r3
 8000c2c:	1e5a      	subs	r2, r3, #1
 8000c2e:	68bb      	ldr	r3, [r7, #8]
 8000c30:	401a      	ands	r2, r3
 8000c32:	697b      	ldr	r3, [r7, #20]
 8000c34:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c36:	2101      	movs	r1, #1
 8000c38:	697b      	ldr	r3, [r7, #20]
 8000c3a:	fa01 f303 	lsl.w	r3, r1, r3
 8000c3e:	1e59      	subs	r1, r3, #1
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c44:	4313      	orrs	r3, r2
         );
}
 8000c46:	4618      	mov	r0, r3
 8000c48:	3724      	adds	r7, #36	; 0x24
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c50:	4770      	bx	lr
	...

08000c54 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000c54:	b580      	push	{r7, lr}
 8000c56:	b082      	sub	sp, #8
 8000c58:	af00      	add	r7, sp, #0
 8000c5a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	3b01      	subs	r3, #1
 8000c60:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000c64:	d301      	bcc.n	8000c6a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000c66:	2301      	movs	r3, #1
 8000c68:	e00f      	b.n	8000c8a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c6a:	4a0a      	ldr	r2, [pc, #40]	; (8000c94 <SysTick_Config+0x40>)
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	3b01      	subs	r3, #1
 8000c70:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000c72:	210f      	movs	r1, #15
 8000c74:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000c78:	f7ff ff90 	bl	8000b9c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c7c:	4b05      	ldr	r3, [pc, #20]	; (8000c94 <SysTick_Config+0x40>)
 8000c7e:	2200      	movs	r2, #0
 8000c80:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c82:	4b04      	ldr	r3, [pc, #16]	; (8000c94 <SysTick_Config+0x40>)
 8000c84:	2207      	movs	r2, #7
 8000c86:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000c88:	2300      	movs	r3, #0
}
 8000c8a:	4618      	mov	r0, r3
 8000c8c:	3708      	adds	r7, #8
 8000c8e:	46bd      	mov	sp, r7
 8000c90:	bd80      	pop	{r7, pc}
 8000c92:	bf00      	nop
 8000c94:	e000e010 	.word	0xe000e010

08000c98 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	b082      	sub	sp, #8
 8000c9c:	af00      	add	r7, sp, #0
 8000c9e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ca0:	6878      	ldr	r0, [r7, #4]
 8000ca2:	f7ff ff49 	bl	8000b38 <__NVIC_SetPriorityGrouping>
}
 8000ca6:	bf00      	nop
 8000ca8:	3708      	adds	r7, #8
 8000caa:	46bd      	mov	sp, r7
 8000cac:	bd80      	pop	{r7, pc}

08000cae <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000cae:	b580      	push	{r7, lr}
 8000cb0:	b086      	sub	sp, #24
 8000cb2:	af00      	add	r7, sp, #0
 8000cb4:	4603      	mov	r3, r0
 8000cb6:	60b9      	str	r1, [r7, #8]
 8000cb8:	607a      	str	r2, [r7, #4]
 8000cba:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000cc0:	f7ff ff5e 	bl	8000b80 <__NVIC_GetPriorityGrouping>
 8000cc4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000cc6:	687a      	ldr	r2, [r7, #4]
 8000cc8:	68b9      	ldr	r1, [r7, #8]
 8000cca:	6978      	ldr	r0, [r7, #20]
 8000ccc:	f7ff ff90 	bl	8000bf0 <NVIC_EncodePriority>
 8000cd0:	4602      	mov	r2, r0
 8000cd2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000cd6:	4611      	mov	r1, r2
 8000cd8:	4618      	mov	r0, r3
 8000cda:	f7ff ff5f 	bl	8000b9c <__NVIC_SetPriority>
}
 8000cde:	bf00      	nop
 8000ce0:	3718      	adds	r7, #24
 8000ce2:	46bd      	mov	sp, r7
 8000ce4:	bd80      	pop	{r7, pc}

08000ce6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000ce6:	b580      	push	{r7, lr}
 8000ce8:	b082      	sub	sp, #8
 8000cea:	af00      	add	r7, sp, #0
 8000cec:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000cee:	6878      	ldr	r0, [r7, #4]
 8000cf0:	f7ff ffb0 	bl	8000c54 <SysTick_Config>
 8000cf4:	4603      	mov	r3, r0
}
 8000cf6:	4618      	mov	r0, r3
 8000cf8:	3708      	adds	r7, #8
 8000cfa:	46bd      	mov	sp, r7
 8000cfc:	bd80      	pop	{r7, pc}
	...

08000d00 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d00:	b480      	push	{r7}
 8000d02:	b089      	sub	sp, #36	; 0x24
 8000d04:	af00      	add	r7, sp, #0
 8000d06:	6078      	str	r0, [r7, #4]
 8000d08:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000d0a:	2300      	movs	r3, #0
 8000d0c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000d0e:	2300      	movs	r3, #0
 8000d10:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000d12:	2300      	movs	r3, #0
 8000d14:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000d16:	2300      	movs	r3, #0
 8000d18:	61fb      	str	r3, [r7, #28]
 8000d1a:	e177      	b.n	800100c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000d1c:	2201      	movs	r2, #1
 8000d1e:	69fb      	ldr	r3, [r7, #28]
 8000d20:	fa02 f303 	lsl.w	r3, r2, r3
 8000d24:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000d26:	683b      	ldr	r3, [r7, #0]
 8000d28:	681a      	ldr	r2, [r3, #0]
 8000d2a:	697b      	ldr	r3, [r7, #20]
 8000d2c:	4013      	ands	r3, r2
 8000d2e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000d30:	693a      	ldr	r2, [r7, #16]
 8000d32:	697b      	ldr	r3, [r7, #20]
 8000d34:	429a      	cmp	r2, r3
 8000d36:	f040 8166 	bne.w	8001006 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000d3a:	683b      	ldr	r3, [r7, #0]
 8000d3c:	685b      	ldr	r3, [r3, #4]
 8000d3e:	2b01      	cmp	r3, #1
 8000d40:	d00b      	beq.n	8000d5a <HAL_GPIO_Init+0x5a>
 8000d42:	683b      	ldr	r3, [r7, #0]
 8000d44:	685b      	ldr	r3, [r3, #4]
 8000d46:	2b02      	cmp	r3, #2
 8000d48:	d007      	beq.n	8000d5a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000d4a:	683b      	ldr	r3, [r7, #0]
 8000d4c:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000d4e:	2b11      	cmp	r3, #17
 8000d50:	d003      	beq.n	8000d5a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000d52:	683b      	ldr	r3, [r7, #0]
 8000d54:	685b      	ldr	r3, [r3, #4]
 8000d56:	2b12      	cmp	r3, #18
 8000d58:	d130      	bne.n	8000dbc <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	689b      	ldr	r3, [r3, #8]
 8000d5e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000d60:	69fb      	ldr	r3, [r7, #28]
 8000d62:	005b      	lsls	r3, r3, #1
 8000d64:	2203      	movs	r2, #3
 8000d66:	fa02 f303 	lsl.w	r3, r2, r3
 8000d6a:	43db      	mvns	r3, r3
 8000d6c:	69ba      	ldr	r2, [r7, #24]
 8000d6e:	4013      	ands	r3, r2
 8000d70:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000d72:	683b      	ldr	r3, [r7, #0]
 8000d74:	68da      	ldr	r2, [r3, #12]
 8000d76:	69fb      	ldr	r3, [r7, #28]
 8000d78:	005b      	lsls	r3, r3, #1
 8000d7a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d7e:	69ba      	ldr	r2, [r7, #24]
 8000d80:	4313      	orrs	r3, r2
 8000d82:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	69ba      	ldr	r2, [r7, #24]
 8000d88:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	685b      	ldr	r3, [r3, #4]
 8000d8e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000d90:	2201      	movs	r2, #1
 8000d92:	69fb      	ldr	r3, [r7, #28]
 8000d94:	fa02 f303 	lsl.w	r3, r2, r3
 8000d98:	43db      	mvns	r3, r3
 8000d9a:	69ba      	ldr	r2, [r7, #24]
 8000d9c:	4013      	ands	r3, r2
 8000d9e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000da0:	683b      	ldr	r3, [r7, #0]
 8000da2:	685b      	ldr	r3, [r3, #4]
 8000da4:	091b      	lsrs	r3, r3, #4
 8000da6:	f003 0201 	and.w	r2, r3, #1
 8000daa:	69fb      	ldr	r3, [r7, #28]
 8000dac:	fa02 f303 	lsl.w	r3, r2, r3
 8000db0:	69ba      	ldr	r2, [r7, #24]
 8000db2:	4313      	orrs	r3, r2
 8000db4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	69ba      	ldr	r2, [r7, #24]
 8000dba:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	68db      	ldr	r3, [r3, #12]
 8000dc0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000dc2:	69fb      	ldr	r3, [r7, #28]
 8000dc4:	005b      	lsls	r3, r3, #1
 8000dc6:	2203      	movs	r2, #3
 8000dc8:	fa02 f303 	lsl.w	r3, r2, r3
 8000dcc:	43db      	mvns	r3, r3
 8000dce:	69ba      	ldr	r2, [r7, #24]
 8000dd0:	4013      	ands	r3, r2
 8000dd2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000dd4:	683b      	ldr	r3, [r7, #0]
 8000dd6:	689a      	ldr	r2, [r3, #8]
 8000dd8:	69fb      	ldr	r3, [r7, #28]
 8000dda:	005b      	lsls	r3, r3, #1
 8000ddc:	fa02 f303 	lsl.w	r3, r2, r3
 8000de0:	69ba      	ldr	r2, [r7, #24]
 8000de2:	4313      	orrs	r3, r2
 8000de4:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	69ba      	ldr	r2, [r7, #24]
 8000dea:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000dec:	683b      	ldr	r3, [r7, #0]
 8000dee:	685b      	ldr	r3, [r3, #4]
 8000df0:	2b02      	cmp	r3, #2
 8000df2:	d003      	beq.n	8000dfc <HAL_GPIO_Init+0xfc>
 8000df4:	683b      	ldr	r3, [r7, #0]
 8000df6:	685b      	ldr	r3, [r3, #4]
 8000df8:	2b12      	cmp	r3, #18
 8000dfa:	d123      	bne.n	8000e44 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000dfc:	69fb      	ldr	r3, [r7, #28]
 8000dfe:	08da      	lsrs	r2, r3, #3
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	3208      	adds	r2, #8
 8000e04:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000e08:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000e0a:	69fb      	ldr	r3, [r7, #28]
 8000e0c:	f003 0307 	and.w	r3, r3, #7
 8000e10:	009b      	lsls	r3, r3, #2
 8000e12:	220f      	movs	r2, #15
 8000e14:	fa02 f303 	lsl.w	r3, r2, r3
 8000e18:	43db      	mvns	r3, r3
 8000e1a:	69ba      	ldr	r2, [r7, #24]
 8000e1c:	4013      	ands	r3, r2
 8000e1e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000e20:	683b      	ldr	r3, [r7, #0]
 8000e22:	691a      	ldr	r2, [r3, #16]
 8000e24:	69fb      	ldr	r3, [r7, #28]
 8000e26:	f003 0307 	and.w	r3, r3, #7
 8000e2a:	009b      	lsls	r3, r3, #2
 8000e2c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e30:	69ba      	ldr	r2, [r7, #24]
 8000e32:	4313      	orrs	r3, r2
 8000e34:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000e36:	69fb      	ldr	r3, [r7, #28]
 8000e38:	08da      	lsrs	r2, r3, #3
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	3208      	adds	r2, #8
 8000e3e:	69b9      	ldr	r1, [r7, #24]
 8000e40:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000e4a:	69fb      	ldr	r3, [r7, #28]
 8000e4c:	005b      	lsls	r3, r3, #1
 8000e4e:	2203      	movs	r2, #3
 8000e50:	fa02 f303 	lsl.w	r3, r2, r3
 8000e54:	43db      	mvns	r3, r3
 8000e56:	69ba      	ldr	r2, [r7, #24]
 8000e58:	4013      	ands	r3, r2
 8000e5a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000e5c:	683b      	ldr	r3, [r7, #0]
 8000e5e:	685b      	ldr	r3, [r3, #4]
 8000e60:	f003 0203 	and.w	r2, r3, #3
 8000e64:	69fb      	ldr	r3, [r7, #28]
 8000e66:	005b      	lsls	r3, r3, #1
 8000e68:	fa02 f303 	lsl.w	r3, r2, r3
 8000e6c:	69ba      	ldr	r2, [r7, #24]
 8000e6e:	4313      	orrs	r3, r2
 8000e70:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	69ba      	ldr	r2, [r7, #24]
 8000e76:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000e78:	683b      	ldr	r3, [r7, #0]
 8000e7a:	685b      	ldr	r3, [r3, #4]
 8000e7c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e80:	2b00      	cmp	r3, #0
 8000e82:	f000 80c0 	beq.w	8001006 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e86:	2300      	movs	r3, #0
 8000e88:	60fb      	str	r3, [r7, #12]
 8000e8a:	4a65      	ldr	r2, [pc, #404]	; (8001020 <HAL_GPIO_Init+0x320>)
 8000e8c:	4b64      	ldr	r3, [pc, #400]	; (8001020 <HAL_GPIO_Init+0x320>)
 8000e8e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e90:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e94:	6453      	str	r3, [r2, #68]	; 0x44
 8000e96:	4b62      	ldr	r3, [pc, #392]	; (8001020 <HAL_GPIO_Init+0x320>)
 8000e98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e9a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e9e:	60fb      	str	r3, [r7, #12]
 8000ea0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000ea2:	4a60      	ldr	r2, [pc, #384]	; (8001024 <HAL_GPIO_Init+0x324>)
 8000ea4:	69fb      	ldr	r3, [r7, #28]
 8000ea6:	089b      	lsrs	r3, r3, #2
 8000ea8:	3302      	adds	r3, #2
 8000eaa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000eae:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000eb0:	69fb      	ldr	r3, [r7, #28]
 8000eb2:	f003 0303 	and.w	r3, r3, #3
 8000eb6:	009b      	lsls	r3, r3, #2
 8000eb8:	220f      	movs	r2, #15
 8000eba:	fa02 f303 	lsl.w	r3, r2, r3
 8000ebe:	43db      	mvns	r3, r3
 8000ec0:	69ba      	ldr	r2, [r7, #24]
 8000ec2:	4013      	ands	r3, r2
 8000ec4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	4a57      	ldr	r2, [pc, #348]	; (8001028 <HAL_GPIO_Init+0x328>)
 8000eca:	4293      	cmp	r3, r2
 8000ecc:	d037      	beq.n	8000f3e <HAL_GPIO_Init+0x23e>
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	4a56      	ldr	r2, [pc, #344]	; (800102c <HAL_GPIO_Init+0x32c>)
 8000ed2:	4293      	cmp	r3, r2
 8000ed4:	d031      	beq.n	8000f3a <HAL_GPIO_Init+0x23a>
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	4a55      	ldr	r2, [pc, #340]	; (8001030 <HAL_GPIO_Init+0x330>)
 8000eda:	4293      	cmp	r3, r2
 8000edc:	d02b      	beq.n	8000f36 <HAL_GPIO_Init+0x236>
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	4a54      	ldr	r2, [pc, #336]	; (8001034 <HAL_GPIO_Init+0x334>)
 8000ee2:	4293      	cmp	r3, r2
 8000ee4:	d025      	beq.n	8000f32 <HAL_GPIO_Init+0x232>
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	4a53      	ldr	r2, [pc, #332]	; (8001038 <HAL_GPIO_Init+0x338>)
 8000eea:	4293      	cmp	r3, r2
 8000eec:	d01f      	beq.n	8000f2e <HAL_GPIO_Init+0x22e>
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	4a52      	ldr	r2, [pc, #328]	; (800103c <HAL_GPIO_Init+0x33c>)
 8000ef2:	4293      	cmp	r3, r2
 8000ef4:	d019      	beq.n	8000f2a <HAL_GPIO_Init+0x22a>
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	4a51      	ldr	r2, [pc, #324]	; (8001040 <HAL_GPIO_Init+0x340>)
 8000efa:	4293      	cmp	r3, r2
 8000efc:	d013      	beq.n	8000f26 <HAL_GPIO_Init+0x226>
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	4a50      	ldr	r2, [pc, #320]	; (8001044 <HAL_GPIO_Init+0x344>)
 8000f02:	4293      	cmp	r3, r2
 8000f04:	d00d      	beq.n	8000f22 <HAL_GPIO_Init+0x222>
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	4a4f      	ldr	r2, [pc, #316]	; (8001048 <HAL_GPIO_Init+0x348>)
 8000f0a:	4293      	cmp	r3, r2
 8000f0c:	d007      	beq.n	8000f1e <HAL_GPIO_Init+0x21e>
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	4a4e      	ldr	r2, [pc, #312]	; (800104c <HAL_GPIO_Init+0x34c>)
 8000f12:	4293      	cmp	r3, r2
 8000f14:	d101      	bne.n	8000f1a <HAL_GPIO_Init+0x21a>
 8000f16:	2309      	movs	r3, #9
 8000f18:	e012      	b.n	8000f40 <HAL_GPIO_Init+0x240>
 8000f1a:	230a      	movs	r3, #10
 8000f1c:	e010      	b.n	8000f40 <HAL_GPIO_Init+0x240>
 8000f1e:	2308      	movs	r3, #8
 8000f20:	e00e      	b.n	8000f40 <HAL_GPIO_Init+0x240>
 8000f22:	2307      	movs	r3, #7
 8000f24:	e00c      	b.n	8000f40 <HAL_GPIO_Init+0x240>
 8000f26:	2306      	movs	r3, #6
 8000f28:	e00a      	b.n	8000f40 <HAL_GPIO_Init+0x240>
 8000f2a:	2305      	movs	r3, #5
 8000f2c:	e008      	b.n	8000f40 <HAL_GPIO_Init+0x240>
 8000f2e:	2304      	movs	r3, #4
 8000f30:	e006      	b.n	8000f40 <HAL_GPIO_Init+0x240>
 8000f32:	2303      	movs	r3, #3
 8000f34:	e004      	b.n	8000f40 <HAL_GPIO_Init+0x240>
 8000f36:	2302      	movs	r3, #2
 8000f38:	e002      	b.n	8000f40 <HAL_GPIO_Init+0x240>
 8000f3a:	2301      	movs	r3, #1
 8000f3c:	e000      	b.n	8000f40 <HAL_GPIO_Init+0x240>
 8000f3e:	2300      	movs	r3, #0
 8000f40:	69fa      	ldr	r2, [r7, #28]
 8000f42:	f002 0203 	and.w	r2, r2, #3
 8000f46:	0092      	lsls	r2, r2, #2
 8000f48:	4093      	lsls	r3, r2
 8000f4a:	69ba      	ldr	r2, [r7, #24]
 8000f4c:	4313      	orrs	r3, r2
 8000f4e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000f50:	4934      	ldr	r1, [pc, #208]	; (8001024 <HAL_GPIO_Init+0x324>)
 8000f52:	69fb      	ldr	r3, [r7, #28]
 8000f54:	089b      	lsrs	r3, r3, #2
 8000f56:	3302      	adds	r3, #2
 8000f58:	69ba      	ldr	r2, [r7, #24]
 8000f5a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000f5e:	4b3c      	ldr	r3, [pc, #240]	; (8001050 <HAL_GPIO_Init+0x350>)
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f64:	693b      	ldr	r3, [r7, #16]
 8000f66:	43db      	mvns	r3, r3
 8000f68:	69ba      	ldr	r2, [r7, #24]
 8000f6a:	4013      	ands	r3, r2
 8000f6c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000f6e:	683b      	ldr	r3, [r7, #0]
 8000f70:	685b      	ldr	r3, [r3, #4]
 8000f72:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	d003      	beq.n	8000f82 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8000f7a:	69ba      	ldr	r2, [r7, #24]
 8000f7c:	693b      	ldr	r3, [r7, #16]
 8000f7e:	4313      	orrs	r3, r2
 8000f80:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000f82:	4a33      	ldr	r2, [pc, #204]	; (8001050 <HAL_GPIO_Init+0x350>)
 8000f84:	69bb      	ldr	r3, [r7, #24]
 8000f86:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000f88:	4b31      	ldr	r3, [pc, #196]	; (8001050 <HAL_GPIO_Init+0x350>)
 8000f8a:	685b      	ldr	r3, [r3, #4]
 8000f8c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f8e:	693b      	ldr	r3, [r7, #16]
 8000f90:	43db      	mvns	r3, r3
 8000f92:	69ba      	ldr	r2, [r7, #24]
 8000f94:	4013      	ands	r3, r2
 8000f96:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000f98:	683b      	ldr	r3, [r7, #0]
 8000f9a:	685b      	ldr	r3, [r3, #4]
 8000f9c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fa0:	2b00      	cmp	r3, #0
 8000fa2:	d003      	beq.n	8000fac <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8000fa4:	69ba      	ldr	r2, [r7, #24]
 8000fa6:	693b      	ldr	r3, [r7, #16]
 8000fa8:	4313      	orrs	r3, r2
 8000faa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000fac:	4a28      	ldr	r2, [pc, #160]	; (8001050 <HAL_GPIO_Init+0x350>)
 8000fae:	69bb      	ldr	r3, [r7, #24]
 8000fb0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000fb2:	4b27      	ldr	r3, [pc, #156]	; (8001050 <HAL_GPIO_Init+0x350>)
 8000fb4:	689b      	ldr	r3, [r3, #8]
 8000fb6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000fb8:	693b      	ldr	r3, [r7, #16]
 8000fba:	43db      	mvns	r3, r3
 8000fbc:	69ba      	ldr	r2, [r7, #24]
 8000fbe:	4013      	ands	r3, r2
 8000fc0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000fc2:	683b      	ldr	r3, [r7, #0]
 8000fc4:	685b      	ldr	r3, [r3, #4]
 8000fc6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d003      	beq.n	8000fd6 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8000fce:	69ba      	ldr	r2, [r7, #24]
 8000fd0:	693b      	ldr	r3, [r7, #16]
 8000fd2:	4313      	orrs	r3, r2
 8000fd4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000fd6:	4a1e      	ldr	r2, [pc, #120]	; (8001050 <HAL_GPIO_Init+0x350>)
 8000fd8:	69bb      	ldr	r3, [r7, #24]
 8000fda:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000fdc:	4b1c      	ldr	r3, [pc, #112]	; (8001050 <HAL_GPIO_Init+0x350>)
 8000fde:	68db      	ldr	r3, [r3, #12]
 8000fe0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000fe2:	693b      	ldr	r3, [r7, #16]
 8000fe4:	43db      	mvns	r3, r3
 8000fe6:	69ba      	ldr	r2, [r7, #24]
 8000fe8:	4013      	ands	r3, r2
 8000fea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000fec:	683b      	ldr	r3, [r7, #0]
 8000fee:	685b      	ldr	r3, [r3, #4]
 8000ff0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	d003      	beq.n	8001000 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8000ff8:	69ba      	ldr	r2, [r7, #24]
 8000ffa:	693b      	ldr	r3, [r7, #16]
 8000ffc:	4313      	orrs	r3, r2
 8000ffe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001000:	4a13      	ldr	r2, [pc, #76]	; (8001050 <HAL_GPIO_Init+0x350>)
 8001002:	69bb      	ldr	r3, [r7, #24]
 8001004:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001006:	69fb      	ldr	r3, [r7, #28]
 8001008:	3301      	adds	r3, #1
 800100a:	61fb      	str	r3, [r7, #28]
 800100c:	69fb      	ldr	r3, [r7, #28]
 800100e:	2b0f      	cmp	r3, #15
 8001010:	f67f ae84 	bls.w	8000d1c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001014:	bf00      	nop
 8001016:	3724      	adds	r7, #36	; 0x24
 8001018:	46bd      	mov	sp, r7
 800101a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101e:	4770      	bx	lr
 8001020:	40023800 	.word	0x40023800
 8001024:	40013800 	.word	0x40013800
 8001028:	40020000 	.word	0x40020000
 800102c:	40020400 	.word	0x40020400
 8001030:	40020800 	.word	0x40020800
 8001034:	40020c00 	.word	0x40020c00
 8001038:	40021000 	.word	0x40021000
 800103c:	40021400 	.word	0x40021400
 8001040:	40021800 	.word	0x40021800
 8001044:	40021c00 	.word	0x40021c00
 8001048:	40022000 	.word	0x40022000
 800104c:	40022400 	.word	0x40022400
 8001050:	40013c00 	.word	0x40013c00

08001054 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001054:	b480      	push	{r7}
 8001056:	b083      	sub	sp, #12
 8001058:	af00      	add	r7, sp, #0
 800105a:	6078      	str	r0, [r7, #4]
 800105c:	460b      	mov	r3, r1
 800105e:	807b      	strh	r3, [r7, #2]
 8001060:	4613      	mov	r3, r2
 8001062:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001064:	787b      	ldrb	r3, [r7, #1]
 8001066:	2b00      	cmp	r3, #0
 8001068:	d003      	beq.n	8001072 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800106a:	887a      	ldrh	r2, [r7, #2]
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001070:	e003      	b.n	800107a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001072:	887b      	ldrh	r3, [r7, #2]
 8001074:	041a      	lsls	r2, r3, #16
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	619a      	str	r2, [r3, #24]
}
 800107a:	bf00      	nop
 800107c:	370c      	adds	r7, #12
 800107e:	46bd      	mov	sp, r7
 8001080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001084:	4770      	bx	lr
	...

08001088 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001088:	b580      	push	{r7, lr}
 800108a:	b086      	sub	sp, #24
 800108c:	af00      	add	r7, sp, #0
 800108e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	2b00      	cmp	r3, #0
 8001094:	d101      	bne.n	800109a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001096:	2301      	movs	r3, #1
 8001098:	e25b      	b.n	8001552 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	f003 0301 	and.w	r3, r3, #1
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d075      	beq.n	8001192 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80010a6:	4ba3      	ldr	r3, [pc, #652]	; (8001334 <HAL_RCC_OscConfig+0x2ac>)
 80010a8:	689b      	ldr	r3, [r3, #8]
 80010aa:	f003 030c 	and.w	r3, r3, #12
 80010ae:	2b04      	cmp	r3, #4
 80010b0:	d00c      	beq.n	80010cc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80010b2:	4ba0      	ldr	r3, [pc, #640]	; (8001334 <HAL_RCC_OscConfig+0x2ac>)
 80010b4:	689b      	ldr	r3, [r3, #8]
 80010b6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80010ba:	2b08      	cmp	r3, #8
 80010bc:	d112      	bne.n	80010e4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80010be:	4b9d      	ldr	r3, [pc, #628]	; (8001334 <HAL_RCC_OscConfig+0x2ac>)
 80010c0:	685b      	ldr	r3, [r3, #4]
 80010c2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80010c6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80010ca:	d10b      	bne.n	80010e4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80010cc:	4b99      	ldr	r3, [pc, #612]	; (8001334 <HAL_RCC_OscConfig+0x2ac>)
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d05b      	beq.n	8001190 <HAL_RCC_OscConfig+0x108>
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	685b      	ldr	r3, [r3, #4]
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d157      	bne.n	8001190 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80010e0:	2301      	movs	r3, #1
 80010e2:	e236      	b.n	8001552 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	685b      	ldr	r3, [r3, #4]
 80010e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80010ec:	d106      	bne.n	80010fc <HAL_RCC_OscConfig+0x74>
 80010ee:	4a91      	ldr	r2, [pc, #580]	; (8001334 <HAL_RCC_OscConfig+0x2ac>)
 80010f0:	4b90      	ldr	r3, [pc, #576]	; (8001334 <HAL_RCC_OscConfig+0x2ac>)
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80010f8:	6013      	str	r3, [r2, #0]
 80010fa:	e01d      	b.n	8001138 <HAL_RCC_OscConfig+0xb0>
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	685b      	ldr	r3, [r3, #4]
 8001100:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001104:	d10c      	bne.n	8001120 <HAL_RCC_OscConfig+0x98>
 8001106:	4a8b      	ldr	r2, [pc, #556]	; (8001334 <HAL_RCC_OscConfig+0x2ac>)
 8001108:	4b8a      	ldr	r3, [pc, #552]	; (8001334 <HAL_RCC_OscConfig+0x2ac>)
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001110:	6013      	str	r3, [r2, #0]
 8001112:	4a88      	ldr	r2, [pc, #544]	; (8001334 <HAL_RCC_OscConfig+0x2ac>)
 8001114:	4b87      	ldr	r3, [pc, #540]	; (8001334 <HAL_RCC_OscConfig+0x2ac>)
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800111c:	6013      	str	r3, [r2, #0]
 800111e:	e00b      	b.n	8001138 <HAL_RCC_OscConfig+0xb0>
 8001120:	4a84      	ldr	r2, [pc, #528]	; (8001334 <HAL_RCC_OscConfig+0x2ac>)
 8001122:	4b84      	ldr	r3, [pc, #528]	; (8001334 <HAL_RCC_OscConfig+0x2ac>)
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800112a:	6013      	str	r3, [r2, #0]
 800112c:	4a81      	ldr	r2, [pc, #516]	; (8001334 <HAL_RCC_OscConfig+0x2ac>)
 800112e:	4b81      	ldr	r3, [pc, #516]	; (8001334 <HAL_RCC_OscConfig+0x2ac>)
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001136:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	685b      	ldr	r3, [r3, #4]
 800113c:	2b00      	cmp	r3, #0
 800113e:	d013      	beq.n	8001168 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001140:	f7ff fccc 	bl	8000adc <HAL_GetTick>
 8001144:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001146:	e008      	b.n	800115a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001148:	f7ff fcc8 	bl	8000adc <HAL_GetTick>
 800114c:	4602      	mov	r2, r0
 800114e:	693b      	ldr	r3, [r7, #16]
 8001150:	1ad3      	subs	r3, r2, r3
 8001152:	2b64      	cmp	r3, #100	; 0x64
 8001154:	d901      	bls.n	800115a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001156:	2303      	movs	r3, #3
 8001158:	e1fb      	b.n	8001552 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800115a:	4b76      	ldr	r3, [pc, #472]	; (8001334 <HAL_RCC_OscConfig+0x2ac>)
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001162:	2b00      	cmp	r3, #0
 8001164:	d0f0      	beq.n	8001148 <HAL_RCC_OscConfig+0xc0>
 8001166:	e014      	b.n	8001192 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001168:	f7ff fcb8 	bl	8000adc <HAL_GetTick>
 800116c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800116e:	e008      	b.n	8001182 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001170:	f7ff fcb4 	bl	8000adc <HAL_GetTick>
 8001174:	4602      	mov	r2, r0
 8001176:	693b      	ldr	r3, [r7, #16]
 8001178:	1ad3      	subs	r3, r2, r3
 800117a:	2b64      	cmp	r3, #100	; 0x64
 800117c:	d901      	bls.n	8001182 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800117e:	2303      	movs	r3, #3
 8001180:	e1e7      	b.n	8001552 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001182:	4b6c      	ldr	r3, [pc, #432]	; (8001334 <HAL_RCC_OscConfig+0x2ac>)
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800118a:	2b00      	cmp	r3, #0
 800118c:	d1f0      	bne.n	8001170 <HAL_RCC_OscConfig+0xe8>
 800118e:	e000      	b.n	8001192 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001190:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	f003 0302 	and.w	r3, r3, #2
 800119a:	2b00      	cmp	r3, #0
 800119c:	d063      	beq.n	8001266 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800119e:	4b65      	ldr	r3, [pc, #404]	; (8001334 <HAL_RCC_OscConfig+0x2ac>)
 80011a0:	689b      	ldr	r3, [r3, #8]
 80011a2:	f003 030c 	and.w	r3, r3, #12
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d00b      	beq.n	80011c2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80011aa:	4b62      	ldr	r3, [pc, #392]	; (8001334 <HAL_RCC_OscConfig+0x2ac>)
 80011ac:	689b      	ldr	r3, [r3, #8]
 80011ae:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80011b2:	2b08      	cmp	r3, #8
 80011b4:	d11c      	bne.n	80011f0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80011b6:	4b5f      	ldr	r3, [pc, #380]	; (8001334 <HAL_RCC_OscConfig+0x2ac>)
 80011b8:	685b      	ldr	r3, [r3, #4]
 80011ba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d116      	bne.n	80011f0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80011c2:	4b5c      	ldr	r3, [pc, #368]	; (8001334 <HAL_RCC_OscConfig+0x2ac>)
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	f003 0302 	and.w	r3, r3, #2
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d005      	beq.n	80011da <HAL_RCC_OscConfig+0x152>
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	68db      	ldr	r3, [r3, #12]
 80011d2:	2b01      	cmp	r3, #1
 80011d4:	d001      	beq.n	80011da <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80011d6:	2301      	movs	r3, #1
 80011d8:	e1bb      	b.n	8001552 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80011da:	4956      	ldr	r1, [pc, #344]	; (8001334 <HAL_RCC_OscConfig+0x2ac>)
 80011dc:	4b55      	ldr	r3, [pc, #340]	; (8001334 <HAL_RCC_OscConfig+0x2ac>)
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	691b      	ldr	r3, [r3, #16]
 80011e8:	00db      	lsls	r3, r3, #3
 80011ea:	4313      	orrs	r3, r2
 80011ec:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80011ee:	e03a      	b.n	8001266 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	68db      	ldr	r3, [r3, #12]
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d020      	beq.n	800123a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80011f8:	4b4f      	ldr	r3, [pc, #316]	; (8001338 <HAL_RCC_OscConfig+0x2b0>)
 80011fa:	2201      	movs	r2, #1
 80011fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80011fe:	f7ff fc6d 	bl	8000adc <HAL_GetTick>
 8001202:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001204:	e008      	b.n	8001218 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001206:	f7ff fc69 	bl	8000adc <HAL_GetTick>
 800120a:	4602      	mov	r2, r0
 800120c:	693b      	ldr	r3, [r7, #16]
 800120e:	1ad3      	subs	r3, r2, r3
 8001210:	2b02      	cmp	r3, #2
 8001212:	d901      	bls.n	8001218 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001214:	2303      	movs	r3, #3
 8001216:	e19c      	b.n	8001552 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001218:	4b46      	ldr	r3, [pc, #280]	; (8001334 <HAL_RCC_OscConfig+0x2ac>)
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	f003 0302 	and.w	r3, r3, #2
 8001220:	2b00      	cmp	r3, #0
 8001222:	d0f0      	beq.n	8001206 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001224:	4943      	ldr	r1, [pc, #268]	; (8001334 <HAL_RCC_OscConfig+0x2ac>)
 8001226:	4b43      	ldr	r3, [pc, #268]	; (8001334 <HAL_RCC_OscConfig+0x2ac>)
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	691b      	ldr	r3, [r3, #16]
 8001232:	00db      	lsls	r3, r3, #3
 8001234:	4313      	orrs	r3, r2
 8001236:	600b      	str	r3, [r1, #0]
 8001238:	e015      	b.n	8001266 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800123a:	4b3f      	ldr	r3, [pc, #252]	; (8001338 <HAL_RCC_OscConfig+0x2b0>)
 800123c:	2200      	movs	r2, #0
 800123e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001240:	f7ff fc4c 	bl	8000adc <HAL_GetTick>
 8001244:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001246:	e008      	b.n	800125a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001248:	f7ff fc48 	bl	8000adc <HAL_GetTick>
 800124c:	4602      	mov	r2, r0
 800124e:	693b      	ldr	r3, [r7, #16]
 8001250:	1ad3      	subs	r3, r2, r3
 8001252:	2b02      	cmp	r3, #2
 8001254:	d901      	bls.n	800125a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001256:	2303      	movs	r3, #3
 8001258:	e17b      	b.n	8001552 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800125a:	4b36      	ldr	r3, [pc, #216]	; (8001334 <HAL_RCC_OscConfig+0x2ac>)
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	f003 0302 	and.w	r3, r3, #2
 8001262:	2b00      	cmp	r3, #0
 8001264:	d1f0      	bne.n	8001248 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	f003 0308 	and.w	r3, r3, #8
 800126e:	2b00      	cmp	r3, #0
 8001270:	d030      	beq.n	80012d4 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	695b      	ldr	r3, [r3, #20]
 8001276:	2b00      	cmp	r3, #0
 8001278:	d016      	beq.n	80012a8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800127a:	4b30      	ldr	r3, [pc, #192]	; (800133c <HAL_RCC_OscConfig+0x2b4>)
 800127c:	2201      	movs	r2, #1
 800127e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001280:	f7ff fc2c 	bl	8000adc <HAL_GetTick>
 8001284:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001286:	e008      	b.n	800129a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001288:	f7ff fc28 	bl	8000adc <HAL_GetTick>
 800128c:	4602      	mov	r2, r0
 800128e:	693b      	ldr	r3, [r7, #16]
 8001290:	1ad3      	subs	r3, r2, r3
 8001292:	2b02      	cmp	r3, #2
 8001294:	d901      	bls.n	800129a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001296:	2303      	movs	r3, #3
 8001298:	e15b      	b.n	8001552 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800129a:	4b26      	ldr	r3, [pc, #152]	; (8001334 <HAL_RCC_OscConfig+0x2ac>)
 800129c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800129e:	f003 0302 	and.w	r3, r3, #2
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d0f0      	beq.n	8001288 <HAL_RCC_OscConfig+0x200>
 80012a6:	e015      	b.n	80012d4 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80012a8:	4b24      	ldr	r3, [pc, #144]	; (800133c <HAL_RCC_OscConfig+0x2b4>)
 80012aa:	2200      	movs	r2, #0
 80012ac:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80012ae:	f7ff fc15 	bl	8000adc <HAL_GetTick>
 80012b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80012b4:	e008      	b.n	80012c8 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80012b6:	f7ff fc11 	bl	8000adc <HAL_GetTick>
 80012ba:	4602      	mov	r2, r0
 80012bc:	693b      	ldr	r3, [r7, #16]
 80012be:	1ad3      	subs	r3, r2, r3
 80012c0:	2b02      	cmp	r3, #2
 80012c2:	d901      	bls.n	80012c8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80012c4:	2303      	movs	r3, #3
 80012c6:	e144      	b.n	8001552 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80012c8:	4b1a      	ldr	r3, [pc, #104]	; (8001334 <HAL_RCC_OscConfig+0x2ac>)
 80012ca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80012cc:	f003 0302 	and.w	r3, r3, #2
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d1f0      	bne.n	80012b6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	f003 0304 	and.w	r3, r3, #4
 80012dc:	2b00      	cmp	r3, #0
 80012de:	f000 80a0 	beq.w	8001422 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80012e2:	2300      	movs	r3, #0
 80012e4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80012e6:	4b13      	ldr	r3, [pc, #76]	; (8001334 <HAL_RCC_OscConfig+0x2ac>)
 80012e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d10f      	bne.n	8001312 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80012f2:	2300      	movs	r3, #0
 80012f4:	60bb      	str	r3, [r7, #8]
 80012f6:	4a0f      	ldr	r2, [pc, #60]	; (8001334 <HAL_RCC_OscConfig+0x2ac>)
 80012f8:	4b0e      	ldr	r3, [pc, #56]	; (8001334 <HAL_RCC_OscConfig+0x2ac>)
 80012fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001300:	6413      	str	r3, [r2, #64]	; 0x40
 8001302:	4b0c      	ldr	r3, [pc, #48]	; (8001334 <HAL_RCC_OscConfig+0x2ac>)
 8001304:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001306:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800130a:	60bb      	str	r3, [r7, #8]
 800130c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800130e:	2301      	movs	r3, #1
 8001310:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001312:	4b0b      	ldr	r3, [pc, #44]	; (8001340 <HAL_RCC_OscConfig+0x2b8>)
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800131a:	2b00      	cmp	r3, #0
 800131c:	d121      	bne.n	8001362 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800131e:	4a08      	ldr	r2, [pc, #32]	; (8001340 <HAL_RCC_OscConfig+0x2b8>)
 8001320:	4b07      	ldr	r3, [pc, #28]	; (8001340 <HAL_RCC_OscConfig+0x2b8>)
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001328:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800132a:	f7ff fbd7 	bl	8000adc <HAL_GetTick>
 800132e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001330:	e011      	b.n	8001356 <HAL_RCC_OscConfig+0x2ce>
 8001332:	bf00      	nop
 8001334:	40023800 	.word	0x40023800
 8001338:	42470000 	.word	0x42470000
 800133c:	42470e80 	.word	0x42470e80
 8001340:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001344:	f7ff fbca 	bl	8000adc <HAL_GetTick>
 8001348:	4602      	mov	r2, r0
 800134a:	693b      	ldr	r3, [r7, #16]
 800134c:	1ad3      	subs	r3, r2, r3
 800134e:	2b02      	cmp	r3, #2
 8001350:	d901      	bls.n	8001356 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8001352:	2303      	movs	r3, #3
 8001354:	e0fd      	b.n	8001552 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001356:	4b81      	ldr	r3, [pc, #516]	; (800155c <HAL_RCC_OscConfig+0x4d4>)
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800135e:	2b00      	cmp	r3, #0
 8001360:	d0f0      	beq.n	8001344 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	689b      	ldr	r3, [r3, #8]
 8001366:	2b01      	cmp	r3, #1
 8001368:	d106      	bne.n	8001378 <HAL_RCC_OscConfig+0x2f0>
 800136a:	4a7d      	ldr	r2, [pc, #500]	; (8001560 <HAL_RCC_OscConfig+0x4d8>)
 800136c:	4b7c      	ldr	r3, [pc, #496]	; (8001560 <HAL_RCC_OscConfig+0x4d8>)
 800136e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001370:	f043 0301 	orr.w	r3, r3, #1
 8001374:	6713      	str	r3, [r2, #112]	; 0x70
 8001376:	e01c      	b.n	80013b2 <HAL_RCC_OscConfig+0x32a>
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	689b      	ldr	r3, [r3, #8]
 800137c:	2b05      	cmp	r3, #5
 800137e:	d10c      	bne.n	800139a <HAL_RCC_OscConfig+0x312>
 8001380:	4a77      	ldr	r2, [pc, #476]	; (8001560 <HAL_RCC_OscConfig+0x4d8>)
 8001382:	4b77      	ldr	r3, [pc, #476]	; (8001560 <HAL_RCC_OscConfig+0x4d8>)
 8001384:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001386:	f043 0304 	orr.w	r3, r3, #4
 800138a:	6713      	str	r3, [r2, #112]	; 0x70
 800138c:	4a74      	ldr	r2, [pc, #464]	; (8001560 <HAL_RCC_OscConfig+0x4d8>)
 800138e:	4b74      	ldr	r3, [pc, #464]	; (8001560 <HAL_RCC_OscConfig+0x4d8>)
 8001390:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001392:	f043 0301 	orr.w	r3, r3, #1
 8001396:	6713      	str	r3, [r2, #112]	; 0x70
 8001398:	e00b      	b.n	80013b2 <HAL_RCC_OscConfig+0x32a>
 800139a:	4a71      	ldr	r2, [pc, #452]	; (8001560 <HAL_RCC_OscConfig+0x4d8>)
 800139c:	4b70      	ldr	r3, [pc, #448]	; (8001560 <HAL_RCC_OscConfig+0x4d8>)
 800139e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80013a0:	f023 0301 	bic.w	r3, r3, #1
 80013a4:	6713      	str	r3, [r2, #112]	; 0x70
 80013a6:	4a6e      	ldr	r2, [pc, #440]	; (8001560 <HAL_RCC_OscConfig+0x4d8>)
 80013a8:	4b6d      	ldr	r3, [pc, #436]	; (8001560 <HAL_RCC_OscConfig+0x4d8>)
 80013aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80013ac:	f023 0304 	bic.w	r3, r3, #4
 80013b0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	689b      	ldr	r3, [r3, #8]
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d015      	beq.n	80013e6 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80013ba:	f7ff fb8f 	bl	8000adc <HAL_GetTick>
 80013be:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80013c0:	e00a      	b.n	80013d8 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80013c2:	f7ff fb8b 	bl	8000adc <HAL_GetTick>
 80013c6:	4602      	mov	r2, r0
 80013c8:	693b      	ldr	r3, [r7, #16]
 80013ca:	1ad3      	subs	r3, r2, r3
 80013cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80013d0:	4293      	cmp	r3, r2
 80013d2:	d901      	bls.n	80013d8 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80013d4:	2303      	movs	r3, #3
 80013d6:	e0bc      	b.n	8001552 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80013d8:	4b61      	ldr	r3, [pc, #388]	; (8001560 <HAL_RCC_OscConfig+0x4d8>)
 80013da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80013dc:	f003 0302 	and.w	r3, r3, #2
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d0ee      	beq.n	80013c2 <HAL_RCC_OscConfig+0x33a>
 80013e4:	e014      	b.n	8001410 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80013e6:	f7ff fb79 	bl	8000adc <HAL_GetTick>
 80013ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80013ec:	e00a      	b.n	8001404 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80013ee:	f7ff fb75 	bl	8000adc <HAL_GetTick>
 80013f2:	4602      	mov	r2, r0
 80013f4:	693b      	ldr	r3, [r7, #16]
 80013f6:	1ad3      	subs	r3, r2, r3
 80013f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80013fc:	4293      	cmp	r3, r2
 80013fe:	d901      	bls.n	8001404 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8001400:	2303      	movs	r3, #3
 8001402:	e0a6      	b.n	8001552 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001404:	4b56      	ldr	r3, [pc, #344]	; (8001560 <HAL_RCC_OscConfig+0x4d8>)
 8001406:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001408:	f003 0302 	and.w	r3, r3, #2
 800140c:	2b00      	cmp	r3, #0
 800140e:	d1ee      	bne.n	80013ee <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001410:	7dfb      	ldrb	r3, [r7, #23]
 8001412:	2b01      	cmp	r3, #1
 8001414:	d105      	bne.n	8001422 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001416:	4a52      	ldr	r2, [pc, #328]	; (8001560 <HAL_RCC_OscConfig+0x4d8>)
 8001418:	4b51      	ldr	r3, [pc, #324]	; (8001560 <HAL_RCC_OscConfig+0x4d8>)
 800141a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800141c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001420:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	699b      	ldr	r3, [r3, #24]
 8001426:	2b00      	cmp	r3, #0
 8001428:	f000 8092 	beq.w	8001550 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800142c:	4b4c      	ldr	r3, [pc, #304]	; (8001560 <HAL_RCC_OscConfig+0x4d8>)
 800142e:	689b      	ldr	r3, [r3, #8]
 8001430:	f003 030c 	and.w	r3, r3, #12
 8001434:	2b08      	cmp	r3, #8
 8001436:	d05c      	beq.n	80014f2 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	699b      	ldr	r3, [r3, #24]
 800143c:	2b02      	cmp	r3, #2
 800143e:	d141      	bne.n	80014c4 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001440:	4b48      	ldr	r3, [pc, #288]	; (8001564 <HAL_RCC_OscConfig+0x4dc>)
 8001442:	2200      	movs	r2, #0
 8001444:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001446:	f7ff fb49 	bl	8000adc <HAL_GetTick>
 800144a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800144c:	e008      	b.n	8001460 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800144e:	f7ff fb45 	bl	8000adc <HAL_GetTick>
 8001452:	4602      	mov	r2, r0
 8001454:	693b      	ldr	r3, [r7, #16]
 8001456:	1ad3      	subs	r3, r2, r3
 8001458:	2b02      	cmp	r3, #2
 800145a:	d901      	bls.n	8001460 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 800145c:	2303      	movs	r3, #3
 800145e:	e078      	b.n	8001552 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001460:	4b3f      	ldr	r3, [pc, #252]	; (8001560 <HAL_RCC_OscConfig+0x4d8>)
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001468:	2b00      	cmp	r3, #0
 800146a:	d1f0      	bne.n	800144e <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800146c:	493c      	ldr	r1, [pc, #240]	; (8001560 <HAL_RCC_OscConfig+0x4d8>)
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	69da      	ldr	r2, [r3, #28]
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	6a1b      	ldr	r3, [r3, #32]
 8001476:	431a      	orrs	r2, r3
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800147c:	019b      	lsls	r3, r3, #6
 800147e:	431a      	orrs	r2, r3
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001484:	085b      	lsrs	r3, r3, #1
 8001486:	3b01      	subs	r3, #1
 8001488:	041b      	lsls	r3, r3, #16
 800148a:	431a      	orrs	r2, r3
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001490:	061b      	lsls	r3, r3, #24
 8001492:	4313      	orrs	r3, r2
 8001494:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001496:	4b33      	ldr	r3, [pc, #204]	; (8001564 <HAL_RCC_OscConfig+0x4dc>)
 8001498:	2201      	movs	r2, #1
 800149a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800149c:	f7ff fb1e 	bl	8000adc <HAL_GetTick>
 80014a0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80014a2:	e008      	b.n	80014b6 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80014a4:	f7ff fb1a 	bl	8000adc <HAL_GetTick>
 80014a8:	4602      	mov	r2, r0
 80014aa:	693b      	ldr	r3, [r7, #16]
 80014ac:	1ad3      	subs	r3, r2, r3
 80014ae:	2b02      	cmp	r3, #2
 80014b0:	d901      	bls.n	80014b6 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80014b2:	2303      	movs	r3, #3
 80014b4:	e04d      	b.n	8001552 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80014b6:	4b2a      	ldr	r3, [pc, #168]	; (8001560 <HAL_RCC_OscConfig+0x4d8>)
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d0f0      	beq.n	80014a4 <HAL_RCC_OscConfig+0x41c>
 80014c2:	e045      	b.n	8001550 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80014c4:	4b27      	ldr	r3, [pc, #156]	; (8001564 <HAL_RCC_OscConfig+0x4dc>)
 80014c6:	2200      	movs	r2, #0
 80014c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014ca:	f7ff fb07 	bl	8000adc <HAL_GetTick>
 80014ce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80014d0:	e008      	b.n	80014e4 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80014d2:	f7ff fb03 	bl	8000adc <HAL_GetTick>
 80014d6:	4602      	mov	r2, r0
 80014d8:	693b      	ldr	r3, [r7, #16]
 80014da:	1ad3      	subs	r3, r2, r3
 80014dc:	2b02      	cmp	r3, #2
 80014de:	d901      	bls.n	80014e4 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80014e0:	2303      	movs	r3, #3
 80014e2:	e036      	b.n	8001552 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80014e4:	4b1e      	ldr	r3, [pc, #120]	; (8001560 <HAL_RCC_OscConfig+0x4d8>)
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d1f0      	bne.n	80014d2 <HAL_RCC_OscConfig+0x44a>
 80014f0:	e02e      	b.n	8001550 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	699b      	ldr	r3, [r3, #24]
 80014f6:	2b01      	cmp	r3, #1
 80014f8:	d101      	bne.n	80014fe <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80014fa:	2301      	movs	r3, #1
 80014fc:	e029      	b.n	8001552 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80014fe:	4b18      	ldr	r3, [pc, #96]	; (8001560 <HAL_RCC_OscConfig+0x4d8>)
 8001500:	685b      	ldr	r3, [r3, #4]
 8001502:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001504:	68fb      	ldr	r3, [r7, #12]
 8001506:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	69db      	ldr	r3, [r3, #28]
 800150e:	429a      	cmp	r2, r3
 8001510:	d11c      	bne.n	800154c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001512:	68fb      	ldr	r3, [r7, #12]
 8001514:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800151c:	429a      	cmp	r2, r3
 800151e:	d115      	bne.n	800154c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8001520:	68fa      	ldr	r2, [r7, #12]
 8001522:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001526:	4013      	ands	r3, r2
 8001528:	687a      	ldr	r2, [r7, #4]
 800152a:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800152c:	4293      	cmp	r3, r2
 800152e:	d10d      	bne.n	800154c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001530:	68fb      	ldr	r3, [r7, #12]
 8001532:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800153a:	429a      	cmp	r2, r3
 800153c:	d106      	bne.n	800154c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 800153e:	68fb      	ldr	r3, [r7, #12]
 8001540:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001548:	429a      	cmp	r2, r3
 800154a:	d001      	beq.n	8001550 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 800154c:	2301      	movs	r3, #1
 800154e:	e000      	b.n	8001552 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8001550:	2300      	movs	r3, #0
}
 8001552:	4618      	mov	r0, r3
 8001554:	3718      	adds	r7, #24
 8001556:	46bd      	mov	sp, r7
 8001558:	bd80      	pop	{r7, pc}
 800155a:	bf00      	nop
 800155c:	40007000 	.word	0x40007000
 8001560:	40023800 	.word	0x40023800
 8001564:	42470060 	.word	0x42470060

08001568 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001568:	b580      	push	{r7, lr}
 800156a:	b084      	sub	sp, #16
 800156c:	af00      	add	r7, sp, #0
 800156e:	6078      	str	r0, [r7, #4]
 8001570:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	2b00      	cmp	r3, #0
 8001576:	d101      	bne.n	800157c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001578:	2301      	movs	r3, #1
 800157a:	e0cc      	b.n	8001716 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800157c:	4b68      	ldr	r3, [pc, #416]	; (8001720 <HAL_RCC_ClockConfig+0x1b8>)
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	f003 020f 	and.w	r2, r3, #15
 8001584:	683b      	ldr	r3, [r7, #0]
 8001586:	429a      	cmp	r2, r3
 8001588:	d20c      	bcs.n	80015a4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800158a:	4b65      	ldr	r3, [pc, #404]	; (8001720 <HAL_RCC_ClockConfig+0x1b8>)
 800158c:	683a      	ldr	r2, [r7, #0]
 800158e:	b2d2      	uxtb	r2, r2
 8001590:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001592:	4b63      	ldr	r3, [pc, #396]	; (8001720 <HAL_RCC_ClockConfig+0x1b8>)
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	f003 020f 	and.w	r2, r3, #15
 800159a:	683b      	ldr	r3, [r7, #0]
 800159c:	429a      	cmp	r2, r3
 800159e:	d001      	beq.n	80015a4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80015a0:	2301      	movs	r3, #1
 80015a2:	e0b8      	b.n	8001716 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	f003 0302 	and.w	r3, r3, #2
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d020      	beq.n	80015f2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	f003 0304 	and.w	r3, r3, #4
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d005      	beq.n	80015c8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80015bc:	4a59      	ldr	r2, [pc, #356]	; (8001724 <HAL_RCC_ClockConfig+0x1bc>)
 80015be:	4b59      	ldr	r3, [pc, #356]	; (8001724 <HAL_RCC_ClockConfig+0x1bc>)
 80015c0:	689b      	ldr	r3, [r3, #8]
 80015c2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80015c6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	f003 0308 	and.w	r3, r3, #8
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d005      	beq.n	80015e0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80015d4:	4a53      	ldr	r2, [pc, #332]	; (8001724 <HAL_RCC_ClockConfig+0x1bc>)
 80015d6:	4b53      	ldr	r3, [pc, #332]	; (8001724 <HAL_RCC_ClockConfig+0x1bc>)
 80015d8:	689b      	ldr	r3, [r3, #8]
 80015da:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80015de:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80015e0:	4950      	ldr	r1, [pc, #320]	; (8001724 <HAL_RCC_ClockConfig+0x1bc>)
 80015e2:	4b50      	ldr	r3, [pc, #320]	; (8001724 <HAL_RCC_ClockConfig+0x1bc>)
 80015e4:	689b      	ldr	r3, [r3, #8]
 80015e6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	689b      	ldr	r3, [r3, #8]
 80015ee:	4313      	orrs	r3, r2
 80015f0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	f003 0301 	and.w	r3, r3, #1
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d044      	beq.n	8001688 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	685b      	ldr	r3, [r3, #4]
 8001602:	2b01      	cmp	r3, #1
 8001604:	d107      	bne.n	8001616 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001606:	4b47      	ldr	r3, [pc, #284]	; (8001724 <HAL_RCC_ClockConfig+0x1bc>)
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800160e:	2b00      	cmp	r3, #0
 8001610:	d119      	bne.n	8001646 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001612:	2301      	movs	r3, #1
 8001614:	e07f      	b.n	8001716 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	685b      	ldr	r3, [r3, #4]
 800161a:	2b02      	cmp	r3, #2
 800161c:	d003      	beq.n	8001626 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001622:	2b03      	cmp	r3, #3
 8001624:	d107      	bne.n	8001636 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001626:	4b3f      	ldr	r3, [pc, #252]	; (8001724 <HAL_RCC_ClockConfig+0x1bc>)
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800162e:	2b00      	cmp	r3, #0
 8001630:	d109      	bne.n	8001646 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001632:	2301      	movs	r3, #1
 8001634:	e06f      	b.n	8001716 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001636:	4b3b      	ldr	r3, [pc, #236]	; (8001724 <HAL_RCC_ClockConfig+0x1bc>)
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	f003 0302 	and.w	r3, r3, #2
 800163e:	2b00      	cmp	r3, #0
 8001640:	d101      	bne.n	8001646 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001642:	2301      	movs	r3, #1
 8001644:	e067      	b.n	8001716 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001646:	4937      	ldr	r1, [pc, #220]	; (8001724 <HAL_RCC_ClockConfig+0x1bc>)
 8001648:	4b36      	ldr	r3, [pc, #216]	; (8001724 <HAL_RCC_ClockConfig+0x1bc>)
 800164a:	689b      	ldr	r3, [r3, #8]
 800164c:	f023 0203 	bic.w	r2, r3, #3
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	685b      	ldr	r3, [r3, #4]
 8001654:	4313      	orrs	r3, r2
 8001656:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001658:	f7ff fa40 	bl	8000adc <HAL_GetTick>
 800165c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800165e:	e00a      	b.n	8001676 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001660:	f7ff fa3c 	bl	8000adc <HAL_GetTick>
 8001664:	4602      	mov	r2, r0
 8001666:	68fb      	ldr	r3, [r7, #12]
 8001668:	1ad3      	subs	r3, r2, r3
 800166a:	f241 3288 	movw	r2, #5000	; 0x1388
 800166e:	4293      	cmp	r3, r2
 8001670:	d901      	bls.n	8001676 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001672:	2303      	movs	r3, #3
 8001674:	e04f      	b.n	8001716 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001676:	4b2b      	ldr	r3, [pc, #172]	; (8001724 <HAL_RCC_ClockConfig+0x1bc>)
 8001678:	689b      	ldr	r3, [r3, #8]
 800167a:	f003 020c 	and.w	r2, r3, #12
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	685b      	ldr	r3, [r3, #4]
 8001682:	009b      	lsls	r3, r3, #2
 8001684:	429a      	cmp	r2, r3
 8001686:	d1eb      	bne.n	8001660 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001688:	4b25      	ldr	r3, [pc, #148]	; (8001720 <HAL_RCC_ClockConfig+0x1b8>)
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	f003 020f 	and.w	r2, r3, #15
 8001690:	683b      	ldr	r3, [r7, #0]
 8001692:	429a      	cmp	r2, r3
 8001694:	d90c      	bls.n	80016b0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001696:	4b22      	ldr	r3, [pc, #136]	; (8001720 <HAL_RCC_ClockConfig+0x1b8>)
 8001698:	683a      	ldr	r2, [r7, #0]
 800169a:	b2d2      	uxtb	r2, r2
 800169c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800169e:	4b20      	ldr	r3, [pc, #128]	; (8001720 <HAL_RCC_ClockConfig+0x1b8>)
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	f003 020f 	and.w	r2, r3, #15
 80016a6:	683b      	ldr	r3, [r7, #0]
 80016a8:	429a      	cmp	r2, r3
 80016aa:	d001      	beq.n	80016b0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80016ac:	2301      	movs	r3, #1
 80016ae:	e032      	b.n	8001716 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	f003 0304 	and.w	r3, r3, #4
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d008      	beq.n	80016ce <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80016bc:	4919      	ldr	r1, [pc, #100]	; (8001724 <HAL_RCC_ClockConfig+0x1bc>)
 80016be:	4b19      	ldr	r3, [pc, #100]	; (8001724 <HAL_RCC_ClockConfig+0x1bc>)
 80016c0:	689b      	ldr	r3, [r3, #8]
 80016c2:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	68db      	ldr	r3, [r3, #12]
 80016ca:	4313      	orrs	r3, r2
 80016cc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	f003 0308 	and.w	r3, r3, #8
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d009      	beq.n	80016ee <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80016da:	4912      	ldr	r1, [pc, #72]	; (8001724 <HAL_RCC_ClockConfig+0x1bc>)
 80016dc:	4b11      	ldr	r3, [pc, #68]	; (8001724 <HAL_RCC_ClockConfig+0x1bc>)
 80016de:	689b      	ldr	r3, [r3, #8]
 80016e0:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	691b      	ldr	r3, [r3, #16]
 80016e8:	00db      	lsls	r3, r3, #3
 80016ea:	4313      	orrs	r3, r2
 80016ec:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80016ee:	f000 f889 	bl	8001804 <HAL_RCC_GetSysClockFreq>
 80016f2:	4601      	mov	r1, r0
 80016f4:	4b0b      	ldr	r3, [pc, #44]	; (8001724 <HAL_RCC_ClockConfig+0x1bc>)
 80016f6:	689b      	ldr	r3, [r3, #8]
 80016f8:	091b      	lsrs	r3, r3, #4
 80016fa:	f003 030f 	and.w	r3, r3, #15
 80016fe:	4a0a      	ldr	r2, [pc, #40]	; (8001728 <HAL_RCC_ClockConfig+0x1c0>)
 8001700:	5cd3      	ldrb	r3, [r2, r3]
 8001702:	fa21 f303 	lsr.w	r3, r1, r3
 8001706:	4a09      	ldr	r2, [pc, #36]	; (800172c <HAL_RCC_ClockConfig+0x1c4>)
 8001708:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800170a:	4b09      	ldr	r3, [pc, #36]	; (8001730 <HAL_RCC_ClockConfig+0x1c8>)
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	4618      	mov	r0, r3
 8001710:	f7ff f9a0 	bl	8000a54 <HAL_InitTick>

  return HAL_OK;
 8001714:	2300      	movs	r3, #0
}
 8001716:	4618      	mov	r0, r3
 8001718:	3710      	adds	r7, #16
 800171a:	46bd      	mov	sp, r7
 800171c:	bd80      	pop	{r7, pc}
 800171e:	bf00      	nop
 8001720:	40023c00 	.word	0x40023c00
 8001724:	40023800 	.word	0x40023800
 8001728:	080021b4 	.word	0x080021b4
 800172c:	20000000 	.word	0x20000000
 8001730:	20000004 	.word	0x20000004

08001734 <HAL_RCC_MCOConfig>:
  * @note  For STM32F410Rx devices to output I2SCLK clock on MCO2 you should have
  *        at last one of the SPI clocks enabled (SPI1, SPI2 or SPI5).
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 8001734:	b580      	push	{r7, lr}
 8001736:	b08c      	sub	sp, #48	; 0x30
 8001738:	af00      	add	r7, sp, #0
 800173a:	60f8      	str	r0, [r7, #12]
 800173c:	60b9      	str	r1, [r7, #8]
 800173e:	607a      	str	r2, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCOx));
  assert_param(IS_RCC_MCODIV(RCC_MCODiv));
  /* RCC_MCO1 */
  if(RCC_MCOx == RCC_MCO1)
 8001740:	68fb      	ldr	r3, [r7, #12]
 8001742:	2b00      	cmp	r3, #0
 8001744:	d129      	bne.n	800179a <HAL_RCC_MCOConfig+0x66>
  {
    assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));

    /* MCO1 Clock Enable */
    __MCO1_CLK_ENABLE();
 8001746:	2300      	movs	r3, #0
 8001748:	61bb      	str	r3, [r7, #24]
 800174a:	4a2b      	ldr	r2, [pc, #172]	; (80017f8 <HAL_RCC_MCOConfig+0xc4>)
 800174c:	4b2a      	ldr	r3, [pc, #168]	; (80017f8 <HAL_RCC_MCOConfig+0xc4>)
 800174e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001750:	f043 0301 	orr.w	r3, r3, #1
 8001754:	6313      	str	r3, [r2, #48]	; 0x30
 8001756:	4b28      	ldr	r3, [pc, #160]	; (80017f8 <HAL_RCC_MCOConfig+0xc4>)
 8001758:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800175a:	f003 0301 	and.w	r3, r3, #1
 800175e:	61bb      	str	r3, [r7, #24]
 8001760:	69bb      	ldr	r3, [r7, #24]

    /* Configure the MCO1 pin in alternate function mode */
    GPIO_InitStruct.Pin = MCO1_PIN;
 8001762:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001766:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001768:	2302      	movs	r3, #2
 800176a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800176c:	2303      	movs	r3, #3
 800176e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001770:	2300      	movs	r3, #0
 8001772:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8001774:	2300      	movs	r3, #0
 8001776:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 8001778:	f107 031c 	add.w	r3, r7, #28
 800177c:	4619      	mov	r1, r3
 800177e:	481f      	ldr	r0, [pc, #124]	; (80017fc <HAL_RCC_MCOConfig+0xc8>)
 8001780:	f7ff fabe 	bl	8000d00 <HAL_GPIO_Init>

    /* Mask MCO1 and MCO1PRE[2:0] bits then Select MCO1 clock source and prescaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO1 | RCC_CFGR_MCO1PRE), (RCC_MCOSource | RCC_MCODiv));
 8001784:	481c      	ldr	r0, [pc, #112]	; (80017f8 <HAL_RCC_MCOConfig+0xc4>)
 8001786:	4b1c      	ldr	r3, [pc, #112]	; (80017f8 <HAL_RCC_MCOConfig+0xc4>)
 8001788:	689b      	ldr	r3, [r3, #8]
 800178a:	f023 62ec 	bic.w	r2, r3, #123731968	; 0x7600000
 800178e:	68b9      	ldr	r1, [r7, #8]
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	430b      	orrs	r3, r1
 8001794:	4313      	orrs	r3, r2
 8001796:	6083      	str	r3, [r0, #8]
#if defined(RCC_CFGR_MCO2EN)
    __HAL_RCC_MCO2_ENABLE();
#endif /* RCC_CFGR_MCO2EN */
  }
#endif /* RCC_CFGR_MCO2 */
}
 8001798:	e029      	b.n	80017ee <HAL_RCC_MCOConfig+0xba>
    __MCO2_CLK_ENABLE();
 800179a:	2300      	movs	r3, #0
 800179c:	617b      	str	r3, [r7, #20]
 800179e:	4a16      	ldr	r2, [pc, #88]	; (80017f8 <HAL_RCC_MCOConfig+0xc4>)
 80017a0:	4b15      	ldr	r3, [pc, #84]	; (80017f8 <HAL_RCC_MCOConfig+0xc4>)
 80017a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017a4:	f043 0304 	orr.w	r3, r3, #4
 80017a8:	6313      	str	r3, [r2, #48]	; 0x30
 80017aa:	4b13      	ldr	r3, [pc, #76]	; (80017f8 <HAL_RCC_MCOConfig+0xc4>)
 80017ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017ae:	f003 0304 	and.w	r3, r3, #4
 80017b2:	617b      	str	r3, [r7, #20]
 80017b4:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = MCO2_PIN;
 80017b6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80017ba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017bc:	2302      	movs	r3, #2
 80017be:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017c0:	2303      	movs	r3, #3
 80017c2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017c4:	2300      	movs	r3, #0
 80017c6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 80017c8:	2300      	movs	r3, #0
 80017ca:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 80017cc:	f107 031c 	add.w	r3, r7, #28
 80017d0:	4619      	mov	r1, r3
 80017d2:	480b      	ldr	r0, [pc, #44]	; (8001800 <HAL_RCC_MCOConfig+0xcc>)
 80017d4:	f7ff fa94 	bl	8000d00 <HAL_GPIO_Init>
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 3U)));
 80017d8:	4807      	ldr	r0, [pc, #28]	; (80017f8 <HAL_RCC_MCOConfig+0xc4>)
 80017da:	4b07      	ldr	r3, [pc, #28]	; (80017f8 <HAL_RCC_MCOConfig+0xc4>)
 80017dc:	689b      	ldr	r3, [r3, #8]
 80017de:	f023 4278 	bic.w	r2, r3, #4160749568	; 0xf8000000
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	00d9      	lsls	r1, r3, #3
 80017e6:	68bb      	ldr	r3, [r7, #8]
 80017e8:	430b      	orrs	r3, r1
 80017ea:	4313      	orrs	r3, r2
 80017ec:	6083      	str	r3, [r0, #8]
}
 80017ee:	bf00      	nop
 80017f0:	3730      	adds	r7, #48	; 0x30
 80017f2:	46bd      	mov	sp, r7
 80017f4:	bd80      	pop	{r7, pc}
 80017f6:	bf00      	nop
 80017f8:	40023800 	.word	0x40023800
 80017fc:	40020000 	.word	0x40020000
 8001800:	40020800 	.word	0x40020800

08001804 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001804:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001808:	b087      	sub	sp, #28
 800180a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800180c:	2200      	movs	r2, #0
 800180e:	60fa      	str	r2, [r7, #12]
 8001810:	2200      	movs	r2, #0
 8001812:	617a      	str	r2, [r7, #20]
 8001814:	2200      	movs	r2, #0
 8001816:	60ba      	str	r2, [r7, #8]
  uint32_t sysclockfreq = 0U;
 8001818:	2200      	movs	r2, #0
 800181a:	613a      	str	r2, [r7, #16]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800181c:	4a51      	ldr	r2, [pc, #324]	; (8001964 <HAL_RCC_GetSysClockFreq+0x160>)
 800181e:	6892      	ldr	r2, [r2, #8]
 8001820:	f002 020c 	and.w	r2, r2, #12
 8001824:	2a04      	cmp	r2, #4
 8001826:	d007      	beq.n	8001838 <HAL_RCC_GetSysClockFreq+0x34>
 8001828:	2a08      	cmp	r2, #8
 800182a:	d008      	beq.n	800183e <HAL_RCC_GetSysClockFreq+0x3a>
 800182c:	2a00      	cmp	r2, #0
 800182e:	f040 8090 	bne.w	8001952 <HAL_RCC_GetSysClockFreq+0x14e>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001832:	4b4d      	ldr	r3, [pc, #308]	; (8001968 <HAL_RCC_GetSysClockFreq+0x164>)
 8001834:	613b      	str	r3, [r7, #16]
       break;
 8001836:	e08f      	b.n	8001958 <HAL_RCC_GetSysClockFreq+0x154>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001838:	4b4c      	ldr	r3, [pc, #304]	; (800196c <HAL_RCC_GetSysClockFreq+0x168>)
 800183a:	613b      	str	r3, [r7, #16]
      break;
 800183c:	e08c      	b.n	8001958 <HAL_RCC_GetSysClockFreq+0x154>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800183e:	4a49      	ldr	r2, [pc, #292]	; (8001964 <HAL_RCC_GetSysClockFreq+0x160>)
 8001840:	6852      	ldr	r2, [r2, #4]
 8001842:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8001846:	60fa      	str	r2, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001848:	4a46      	ldr	r2, [pc, #280]	; (8001964 <HAL_RCC_GetSysClockFreq+0x160>)
 800184a:	6852      	ldr	r2, [r2, #4]
 800184c:	f402 0280 	and.w	r2, r2, #4194304	; 0x400000
 8001850:	2a00      	cmp	r2, #0
 8001852:	d023      	beq.n	800189c <HAL_RCC_GetSysClockFreq+0x98>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001854:	4b43      	ldr	r3, [pc, #268]	; (8001964 <HAL_RCC_GetSysClockFreq+0x160>)
 8001856:	685b      	ldr	r3, [r3, #4]
 8001858:	099b      	lsrs	r3, r3, #6
 800185a:	f04f 0400 	mov.w	r4, #0
 800185e:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001862:	f04f 0200 	mov.w	r2, #0
 8001866:	ea03 0301 	and.w	r3, r3, r1
 800186a:	ea04 0402 	and.w	r4, r4, r2
 800186e:	4a3f      	ldr	r2, [pc, #252]	; (800196c <HAL_RCC_GetSysClockFreq+0x168>)
 8001870:	fb02 f104 	mul.w	r1, r2, r4
 8001874:	2200      	movs	r2, #0
 8001876:	fb02 f203 	mul.w	r2, r2, r3
 800187a:	440a      	add	r2, r1
 800187c:	493b      	ldr	r1, [pc, #236]	; (800196c <HAL_RCC_GetSysClockFreq+0x168>)
 800187e:	fba3 0101 	umull	r0, r1, r3, r1
 8001882:	1853      	adds	r3, r2, r1
 8001884:	4619      	mov	r1, r3
 8001886:	68fb      	ldr	r3, [r7, #12]
 8001888:	f04f 0400 	mov.w	r4, #0
 800188c:	461a      	mov	r2, r3
 800188e:	4623      	mov	r3, r4
 8001890:	f7fe fcac 	bl	80001ec <__aeabi_uldivmod>
 8001894:	4603      	mov	r3, r0
 8001896:	460c      	mov	r4, r1
 8001898:	617b      	str	r3, [r7, #20]
 800189a:	e04c      	b.n	8001936 <HAL_RCC_GetSysClockFreq+0x132>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800189c:	4a31      	ldr	r2, [pc, #196]	; (8001964 <HAL_RCC_GetSysClockFreq+0x160>)
 800189e:	6852      	ldr	r2, [r2, #4]
 80018a0:	0992      	lsrs	r2, r2, #6
 80018a2:	4611      	mov	r1, r2
 80018a4:	f04f 0200 	mov.w	r2, #0
 80018a8:	f240 15ff 	movw	r5, #511	; 0x1ff
 80018ac:	f04f 0600 	mov.w	r6, #0
 80018b0:	ea05 0501 	and.w	r5, r5, r1
 80018b4:	ea06 0602 	and.w	r6, r6, r2
 80018b8:	4629      	mov	r1, r5
 80018ba:	4632      	mov	r2, r6
 80018bc:	ea4f 1b42 	mov.w	fp, r2, lsl #5
 80018c0:	ea4b 6bd1 	orr.w	fp, fp, r1, lsr #27
 80018c4:	ea4f 1a41 	mov.w	sl, r1, lsl #5
 80018c8:	4651      	mov	r1, sl
 80018ca:	465a      	mov	r2, fp
 80018cc:	46aa      	mov	sl, r5
 80018ce:	46b3      	mov	fp, r6
 80018d0:	4655      	mov	r5, sl
 80018d2:	465e      	mov	r6, fp
 80018d4:	1b4d      	subs	r5, r1, r5
 80018d6:	eb62 0606 	sbc.w	r6, r2, r6
 80018da:	4629      	mov	r1, r5
 80018dc:	4632      	mov	r2, r6
 80018de:	0194      	lsls	r4, r2, #6
 80018e0:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80018e4:	018b      	lsls	r3, r1, #6
 80018e6:	1a5b      	subs	r3, r3, r1
 80018e8:	eb64 0402 	sbc.w	r4, r4, r2
 80018ec:	ea4f 09c4 	mov.w	r9, r4, lsl #3
 80018f0:	ea49 7953 	orr.w	r9, r9, r3, lsr #29
 80018f4:	ea4f 08c3 	mov.w	r8, r3, lsl #3
 80018f8:	4643      	mov	r3, r8
 80018fa:	464c      	mov	r4, r9
 80018fc:	4655      	mov	r5, sl
 80018fe:	465e      	mov	r6, fp
 8001900:	18ed      	adds	r5, r5, r3
 8001902:	eb46 0604 	adc.w	r6, r6, r4
 8001906:	462b      	mov	r3, r5
 8001908:	4634      	mov	r4, r6
 800190a:	02a2      	lsls	r2, r4, #10
 800190c:	607a      	str	r2, [r7, #4]
 800190e:	687a      	ldr	r2, [r7, #4]
 8001910:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8001914:	607a      	str	r2, [r7, #4]
 8001916:	029b      	lsls	r3, r3, #10
 8001918:	603b      	str	r3, [r7, #0]
 800191a:	e897 0018 	ldmia.w	r7, {r3, r4}
 800191e:	4618      	mov	r0, r3
 8001920:	4621      	mov	r1, r4
 8001922:	68fb      	ldr	r3, [r7, #12]
 8001924:	f04f 0400 	mov.w	r4, #0
 8001928:	461a      	mov	r2, r3
 800192a:	4623      	mov	r3, r4
 800192c:	f7fe fc5e 	bl	80001ec <__aeabi_uldivmod>
 8001930:	4603      	mov	r3, r0
 8001932:	460c      	mov	r4, r1
 8001934:	617b      	str	r3, [r7, #20]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001936:	4b0b      	ldr	r3, [pc, #44]	; (8001964 <HAL_RCC_GetSysClockFreq+0x160>)
 8001938:	685b      	ldr	r3, [r3, #4]
 800193a:	0c1b      	lsrs	r3, r3, #16
 800193c:	f003 0303 	and.w	r3, r3, #3
 8001940:	3301      	adds	r3, #1
 8001942:	005b      	lsls	r3, r3, #1
 8001944:	60bb      	str	r3, [r7, #8]

      sysclockfreq = pllvco/pllp;
 8001946:	697a      	ldr	r2, [r7, #20]
 8001948:	68bb      	ldr	r3, [r7, #8]
 800194a:	fbb2 f3f3 	udiv	r3, r2, r3
 800194e:	613b      	str	r3, [r7, #16]
      break;
 8001950:	e002      	b.n	8001958 <HAL_RCC_GetSysClockFreq+0x154>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001952:	4b05      	ldr	r3, [pc, #20]	; (8001968 <HAL_RCC_GetSysClockFreq+0x164>)
 8001954:	613b      	str	r3, [r7, #16]
      break;
 8001956:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001958:	693b      	ldr	r3, [r7, #16]
}
 800195a:	4618      	mov	r0, r3
 800195c:	371c      	adds	r7, #28
 800195e:	46bd      	mov	sp, r7
 8001960:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001964:	40023800 	.word	0x40023800
 8001968:	00f42400 	.word	0x00f42400
 800196c:	017d7840 	.word	0x017d7840

08001970 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001970:	b480      	push	{r7}
 8001972:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001974:	4b03      	ldr	r3, [pc, #12]	; (8001984 <HAL_RCC_GetHCLKFreq+0x14>)
 8001976:	681b      	ldr	r3, [r3, #0]
}
 8001978:	4618      	mov	r0, r3
 800197a:	46bd      	mov	sp, r7
 800197c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001980:	4770      	bx	lr
 8001982:	bf00      	nop
 8001984:	20000000 	.word	0x20000000

08001988 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001988:	b580      	push	{r7, lr}
 800198a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800198c:	f7ff fff0 	bl	8001970 <HAL_RCC_GetHCLKFreq>
 8001990:	4601      	mov	r1, r0
 8001992:	4b05      	ldr	r3, [pc, #20]	; (80019a8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001994:	689b      	ldr	r3, [r3, #8]
 8001996:	0a9b      	lsrs	r3, r3, #10
 8001998:	f003 0307 	and.w	r3, r3, #7
 800199c:	4a03      	ldr	r2, [pc, #12]	; (80019ac <HAL_RCC_GetPCLK1Freq+0x24>)
 800199e:	5cd3      	ldrb	r3, [r2, r3]
 80019a0:	fa21 f303 	lsr.w	r3, r1, r3
}
 80019a4:	4618      	mov	r0, r3
 80019a6:	bd80      	pop	{r7, pc}
 80019a8:	40023800 	.word	0x40023800
 80019ac:	080021c4 	.word	0x080021c4

080019b0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80019b0:	b580      	push	{r7, lr}
 80019b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80019b4:	f7ff ffdc 	bl	8001970 <HAL_RCC_GetHCLKFreq>
 80019b8:	4601      	mov	r1, r0
 80019ba:	4b05      	ldr	r3, [pc, #20]	; (80019d0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80019bc:	689b      	ldr	r3, [r3, #8]
 80019be:	0b5b      	lsrs	r3, r3, #13
 80019c0:	f003 0307 	and.w	r3, r3, #7
 80019c4:	4a03      	ldr	r2, [pc, #12]	; (80019d4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80019c6:	5cd3      	ldrb	r3, [r2, r3]
 80019c8:	fa21 f303 	lsr.w	r3, r1, r3
}
 80019cc:	4618      	mov	r0, r3
 80019ce:	bd80      	pop	{r7, pc}
 80019d0:	40023800 	.word	0x40023800
 80019d4:	080021c4 	.word	0x080021c4

080019d8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80019d8:	b580      	push	{r7, lr}
 80019da:	b082      	sub	sp, #8
 80019dc:	af00      	add	r7, sp, #0
 80019de:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d101      	bne.n	80019ea <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80019e6:	2301      	movs	r3, #1
 80019e8:	e03f      	b.n	8001a6a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80019f0:	b2db      	uxtb	r3, r3
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d106      	bne.n	8001a04 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	2200      	movs	r2, #0
 80019fa:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80019fe:	6878      	ldr	r0, [r7, #4]
 8001a00:	f7fe ff48 	bl	8000894 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	2224      	movs	r2, #36	; 0x24
 8001a08:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	687a      	ldr	r2, [r7, #4]
 8001a12:	6812      	ldr	r2, [r2, #0]
 8001a14:	68d2      	ldr	r2, [r2, #12]
 8001a16:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001a1a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001a1c:	6878      	ldr	r0, [r7, #4]
 8001a1e:	f000 f829 	bl	8001a74 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	687a      	ldr	r2, [r7, #4]
 8001a28:	6812      	ldr	r2, [r2, #0]
 8001a2a:	6912      	ldr	r2, [r2, #16]
 8001a2c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001a30:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	687a      	ldr	r2, [r7, #4]
 8001a38:	6812      	ldr	r2, [r2, #0]
 8001a3a:	6952      	ldr	r2, [r2, #20]
 8001a3c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001a40:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	687a      	ldr	r2, [r7, #4]
 8001a48:	6812      	ldr	r2, [r2, #0]
 8001a4a:	68d2      	ldr	r2, [r2, #12]
 8001a4c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001a50:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	2200      	movs	r2, #0
 8001a56:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	2220      	movs	r2, #32
 8001a5c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	2220      	movs	r2, #32
 8001a64:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8001a68:	2300      	movs	r3, #0
}
 8001a6a:	4618      	mov	r0, r3
 8001a6c:	3708      	adds	r7, #8
 8001a6e:	46bd      	mov	sp, r7
 8001a70:	bd80      	pop	{r7, pc}
	...

08001a74 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001a74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001a78:	b0a3      	sub	sp, #140	; 0x8c
 8001a7a:	af00      	add	r7, sp, #0
 8001a7c:	67f8      	str	r0, [r7, #124]	; 0x7c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001a7e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001a80:	6819      	ldr	r1, [r3, #0]
 8001a82:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	691b      	ldr	r3, [r3, #16]
 8001a88:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8001a8c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001a8e:	68db      	ldr	r3, [r3, #12]
 8001a90:	4313      	orrs	r3, r2
 8001a92:	610b      	str	r3, [r1, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001a94:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001a96:	689a      	ldr	r2, [r3, #8]
 8001a98:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001a9a:	691b      	ldr	r3, [r3, #16]
 8001a9c:	431a      	orrs	r2, r3
 8001a9e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001aa0:	695b      	ldr	r3, [r3, #20]
 8001aa2:	431a      	orrs	r2, r3
 8001aa4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001aa6:	69db      	ldr	r3, [r3, #28]
 8001aa8:	4313      	orrs	r3, r2
 8001aaa:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  MODIFY_REG(huart->Instance->CR1,
 8001aae:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001ab0:	6819      	ldr	r1, [r3, #0]
 8001ab2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	68db      	ldr	r3, [r3, #12]
 8001ab8:	f423 4216 	bic.w	r2, r3, #38400	; 0x9600
 8001abc:	f022 020c 	bic.w	r2, r2, #12
 8001ac0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001ac4:	4313      	orrs	r3, r2
 8001ac6:	60cb      	str	r3, [r1, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001ac8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001aca:	6819      	ldr	r1, [r3, #0]
 8001acc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	695b      	ldr	r3, [r3, #20]
 8001ad2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001ad6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001ad8:	699b      	ldr	r3, [r3, #24]
 8001ada:	4313      	orrs	r3, r2
 8001adc:	614b      	str	r3, [r1, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001ade:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001ae0:	69db      	ldr	r3, [r3, #28]
 8001ae2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001ae6:	f040 8171 	bne.w	8001dcc <UART_SetConfig+0x358>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8001aea:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	4ab4      	ldr	r2, [pc, #720]	; (8001dc0 <UART_SetConfig+0x34c>)
 8001af0:	4293      	cmp	r3, r2
 8001af2:	d005      	beq.n	8001b00 <UART_SetConfig+0x8c>
 8001af4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	4ab2      	ldr	r2, [pc, #712]	; (8001dc4 <UART_SetConfig+0x350>)
 8001afa:	4293      	cmp	r3, r2
 8001afc:	f040 80b1 	bne.w	8001c62 <UART_SetConfig+0x1ee>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8001b00:	f7ff ff56 	bl	80019b0 <HAL_RCC_GetPCLK2Freq>
 8001b04:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8001b08:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001b0a:	681d      	ldr	r5, [r3, #0]
 8001b0c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001b10:	4619      	mov	r1, r3
 8001b12:	f04f 0200 	mov.w	r2, #0
 8001b16:	460b      	mov	r3, r1
 8001b18:	4614      	mov	r4, r2
 8001b1a:	18db      	adds	r3, r3, r3
 8001b1c:	eb44 0404 	adc.w	r4, r4, r4
 8001b20:	185b      	adds	r3, r3, r1
 8001b22:	eb44 0402 	adc.w	r4, r4, r2
 8001b26:	00e0      	lsls	r0, r4, #3
 8001b28:	6478      	str	r0, [r7, #68]	; 0x44
 8001b2a:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8001b2c:	ea40 7053 	orr.w	r0, r0, r3, lsr #29
 8001b30:	6478      	str	r0, [r7, #68]	; 0x44
 8001b32:	00db      	lsls	r3, r3, #3
 8001b34:	643b      	str	r3, [r7, #64]	; 0x40
 8001b36:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
 8001b3a:	eb13 0801 	adds.w	r8, r3, r1
 8001b3e:	eb44 0902 	adc.w	r9, r4, r2
 8001b42:	4640      	mov	r0, r8
 8001b44:	4649      	mov	r1, r9
 8001b46:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001b48:	685b      	ldr	r3, [r3, #4]
 8001b4a:	f04f 0400 	mov.w	r4, #0
 8001b4e:	18db      	adds	r3, r3, r3
 8001b50:	eb44 0404 	adc.w	r4, r4, r4
 8001b54:	461a      	mov	r2, r3
 8001b56:	4623      	mov	r3, r4
 8001b58:	f7fe fb48 	bl	80001ec <__aeabi_uldivmod>
 8001b5c:	4603      	mov	r3, r0
 8001b5e:	460c      	mov	r4, r1
 8001b60:	461a      	mov	r2, r3
 8001b62:	4b99      	ldr	r3, [pc, #612]	; (8001dc8 <UART_SetConfig+0x354>)
 8001b64:	fba3 2302 	umull	r2, r3, r3, r2
 8001b68:	095b      	lsrs	r3, r3, #5
 8001b6a:	011e      	lsls	r6, r3, #4
 8001b6c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001b70:	4619      	mov	r1, r3
 8001b72:	f04f 0200 	mov.w	r2, #0
 8001b76:	460b      	mov	r3, r1
 8001b78:	4614      	mov	r4, r2
 8001b7a:	18db      	adds	r3, r3, r3
 8001b7c:	eb44 0404 	adc.w	r4, r4, r4
 8001b80:	185b      	adds	r3, r3, r1
 8001b82:	eb44 0402 	adc.w	r4, r4, r2
 8001b86:	00e0      	lsls	r0, r4, #3
 8001b88:	63f8      	str	r0, [r7, #60]	; 0x3c
 8001b8a:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8001b8c:	ea40 7053 	orr.w	r0, r0, r3, lsr #29
 8001b90:	63f8      	str	r0, [r7, #60]	; 0x3c
 8001b92:	00db      	lsls	r3, r3, #3
 8001b94:	63bb      	str	r3, [r7, #56]	; 0x38
 8001b96:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	; 0x38
 8001b9a:	eb13 0801 	adds.w	r8, r3, r1
 8001b9e:	eb44 0902 	adc.w	r9, r4, r2
 8001ba2:	4640      	mov	r0, r8
 8001ba4:	4649      	mov	r1, r9
 8001ba6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001ba8:	685b      	ldr	r3, [r3, #4]
 8001baa:	f04f 0400 	mov.w	r4, #0
 8001bae:	18db      	adds	r3, r3, r3
 8001bb0:	eb44 0404 	adc.w	r4, r4, r4
 8001bb4:	461a      	mov	r2, r3
 8001bb6:	4623      	mov	r3, r4
 8001bb8:	f7fe fb18 	bl	80001ec <__aeabi_uldivmod>
 8001bbc:	4603      	mov	r3, r0
 8001bbe:	460c      	mov	r4, r1
 8001bc0:	461a      	mov	r2, r3
 8001bc2:	4b81      	ldr	r3, [pc, #516]	; (8001dc8 <UART_SetConfig+0x354>)
 8001bc4:	fba3 1302 	umull	r1, r3, r3, r2
 8001bc8:	095b      	lsrs	r3, r3, #5
 8001bca:	2164      	movs	r1, #100	; 0x64
 8001bcc:	fb01 f303 	mul.w	r3, r1, r3
 8001bd0:	1ad3      	subs	r3, r2, r3
 8001bd2:	00db      	lsls	r3, r3, #3
 8001bd4:	3332      	adds	r3, #50	; 0x32
 8001bd6:	4a7c      	ldr	r2, [pc, #496]	; (8001dc8 <UART_SetConfig+0x354>)
 8001bd8:	fba2 2303 	umull	r2, r3, r2, r3
 8001bdc:	095b      	lsrs	r3, r3, #5
 8001bde:	005b      	lsls	r3, r3, #1
 8001be0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8001be4:	441e      	add	r6, r3
 8001be6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001bea:	4619      	mov	r1, r3
 8001bec:	f04f 0200 	mov.w	r2, #0
 8001bf0:	460b      	mov	r3, r1
 8001bf2:	4614      	mov	r4, r2
 8001bf4:	18db      	adds	r3, r3, r3
 8001bf6:	eb44 0404 	adc.w	r4, r4, r4
 8001bfa:	185b      	adds	r3, r3, r1
 8001bfc:	eb44 0402 	adc.w	r4, r4, r2
 8001c00:	00e0      	lsls	r0, r4, #3
 8001c02:	6378      	str	r0, [r7, #52]	; 0x34
 8001c04:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8001c06:	ea40 7053 	orr.w	r0, r0, r3, lsr #29
 8001c0a:	6378      	str	r0, [r7, #52]	; 0x34
 8001c0c:	00db      	lsls	r3, r3, #3
 8001c0e:	633b      	str	r3, [r7, #48]	; 0x30
 8001c10:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 8001c14:	eb13 0801 	adds.w	r8, r3, r1
 8001c18:	eb44 0902 	adc.w	r9, r4, r2
 8001c1c:	4640      	mov	r0, r8
 8001c1e:	4649      	mov	r1, r9
 8001c20:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001c22:	685b      	ldr	r3, [r3, #4]
 8001c24:	f04f 0400 	mov.w	r4, #0
 8001c28:	18db      	adds	r3, r3, r3
 8001c2a:	eb44 0404 	adc.w	r4, r4, r4
 8001c2e:	461a      	mov	r2, r3
 8001c30:	4623      	mov	r3, r4
 8001c32:	f7fe fadb 	bl	80001ec <__aeabi_uldivmod>
 8001c36:	4603      	mov	r3, r0
 8001c38:	460c      	mov	r4, r1
 8001c3a:	461a      	mov	r2, r3
 8001c3c:	4b62      	ldr	r3, [pc, #392]	; (8001dc8 <UART_SetConfig+0x354>)
 8001c3e:	fba3 1302 	umull	r1, r3, r3, r2
 8001c42:	095b      	lsrs	r3, r3, #5
 8001c44:	2164      	movs	r1, #100	; 0x64
 8001c46:	fb01 f303 	mul.w	r3, r1, r3
 8001c4a:	1ad3      	subs	r3, r2, r3
 8001c4c:	00db      	lsls	r3, r3, #3
 8001c4e:	3332      	adds	r3, #50	; 0x32
 8001c50:	4a5d      	ldr	r2, [pc, #372]	; (8001dc8 <UART_SetConfig+0x354>)
 8001c52:	fba2 2303 	umull	r2, r3, r2, r3
 8001c56:	095b      	lsrs	r3, r3, #5
 8001c58:	f003 0307 	and.w	r3, r3, #7
 8001c5c:	4433      	add	r3, r6
 8001c5e:	60ab      	str	r3, [r5, #8]
 8001c60:	e240      	b.n	80020e4 <UART_SetConfig+0x670>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8001c62:	f7ff fe91 	bl	8001988 <HAL_RCC_GetPCLK1Freq>
 8001c66:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8001c6a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001c6c:	681a      	ldr	r2, [r3, #0]
 8001c6e:	673a      	str	r2, [r7, #112]	; 0x70
 8001c70:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001c74:	4619      	mov	r1, r3
 8001c76:	f04f 0200 	mov.w	r2, #0
 8001c7a:	460b      	mov	r3, r1
 8001c7c:	4614      	mov	r4, r2
 8001c7e:	18db      	adds	r3, r3, r3
 8001c80:	eb44 0404 	adc.w	r4, r4, r4
 8001c84:	185b      	adds	r3, r3, r1
 8001c86:	eb44 0402 	adc.w	r4, r4, r2
 8001c8a:	00e0      	lsls	r0, r4, #3
 8001c8c:	62f8      	str	r0, [r7, #44]	; 0x2c
 8001c8e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001c90:	ea40 7053 	orr.w	r0, r0, r3, lsr #29
 8001c94:	62f8      	str	r0, [r7, #44]	; 0x2c
 8001c96:	00db      	lsls	r3, r3, #3
 8001c98:	62bb      	str	r3, [r7, #40]	; 0x28
 8001c9a:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 8001c9e:	185d      	adds	r5, r3, r1
 8001ca0:	eb44 0602 	adc.w	r6, r4, r2
 8001ca4:	4628      	mov	r0, r5
 8001ca6:	4631      	mov	r1, r6
 8001ca8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001caa:	685b      	ldr	r3, [r3, #4]
 8001cac:	f04f 0400 	mov.w	r4, #0
 8001cb0:	18db      	adds	r3, r3, r3
 8001cb2:	eb44 0404 	adc.w	r4, r4, r4
 8001cb6:	461a      	mov	r2, r3
 8001cb8:	4623      	mov	r3, r4
 8001cba:	f7fe fa97 	bl	80001ec <__aeabi_uldivmod>
 8001cbe:	4603      	mov	r3, r0
 8001cc0:	460c      	mov	r4, r1
 8001cc2:	461a      	mov	r2, r3
 8001cc4:	4b40      	ldr	r3, [pc, #256]	; (8001dc8 <UART_SetConfig+0x354>)
 8001cc6:	fba3 2302 	umull	r2, r3, r3, r2
 8001cca:	095b      	lsrs	r3, r3, #5
 8001ccc:	011e      	lsls	r6, r3, #4
 8001cce:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001cd2:	4619      	mov	r1, r3
 8001cd4:	f04f 0200 	mov.w	r2, #0
 8001cd8:	460b      	mov	r3, r1
 8001cda:	4614      	mov	r4, r2
 8001cdc:	18db      	adds	r3, r3, r3
 8001cde:	eb44 0404 	adc.w	r4, r4, r4
 8001ce2:	185b      	adds	r3, r3, r1
 8001ce4:	eb44 0402 	adc.w	r4, r4, r2
 8001ce8:	ea4f 0bc4 	mov.w	fp, r4, lsl #3
 8001cec:	ea4b 7b53 	orr.w	fp, fp, r3, lsr #29
 8001cf0:	ea4f 0ac3 	mov.w	sl, r3, lsl #3
 8001cf4:	4653      	mov	r3, sl
 8001cf6:	465c      	mov	r4, fp
 8001cf8:	eb13 0a01 	adds.w	sl, r3, r1
 8001cfc:	eb44 0b02 	adc.w	fp, r4, r2
 8001d00:	4650      	mov	r0, sl
 8001d02:	4659      	mov	r1, fp
 8001d04:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001d06:	685b      	ldr	r3, [r3, #4]
 8001d08:	f04f 0400 	mov.w	r4, #0
 8001d0c:	18db      	adds	r3, r3, r3
 8001d0e:	eb44 0404 	adc.w	r4, r4, r4
 8001d12:	461a      	mov	r2, r3
 8001d14:	4623      	mov	r3, r4
 8001d16:	f7fe fa69 	bl	80001ec <__aeabi_uldivmod>
 8001d1a:	4603      	mov	r3, r0
 8001d1c:	460c      	mov	r4, r1
 8001d1e:	461a      	mov	r2, r3
 8001d20:	4b29      	ldr	r3, [pc, #164]	; (8001dc8 <UART_SetConfig+0x354>)
 8001d22:	fba3 1302 	umull	r1, r3, r3, r2
 8001d26:	095b      	lsrs	r3, r3, #5
 8001d28:	2164      	movs	r1, #100	; 0x64
 8001d2a:	fb01 f303 	mul.w	r3, r1, r3
 8001d2e:	1ad3      	subs	r3, r2, r3
 8001d30:	00db      	lsls	r3, r3, #3
 8001d32:	3332      	adds	r3, #50	; 0x32
 8001d34:	4a24      	ldr	r2, [pc, #144]	; (8001dc8 <UART_SetConfig+0x354>)
 8001d36:	fba2 2303 	umull	r2, r3, r2, r3
 8001d3a:	095b      	lsrs	r3, r3, #5
 8001d3c:	005b      	lsls	r3, r3, #1
 8001d3e:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8001d42:	441e      	add	r6, r3
 8001d44:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001d48:	4619      	mov	r1, r3
 8001d4a:	f04f 0200 	mov.w	r2, #0
 8001d4e:	460b      	mov	r3, r1
 8001d50:	4614      	mov	r4, r2
 8001d52:	18db      	adds	r3, r3, r3
 8001d54:	eb44 0404 	adc.w	r4, r4, r4
 8001d58:	185b      	adds	r3, r3, r1
 8001d5a:	eb44 0402 	adc.w	r4, r4, r2
 8001d5e:	ea4f 09c4 	mov.w	r9, r4, lsl #3
 8001d62:	ea49 7953 	orr.w	r9, r9, r3, lsr #29
 8001d66:	ea4f 08c3 	mov.w	r8, r3, lsl #3
 8001d6a:	4643      	mov	r3, r8
 8001d6c:	464c      	mov	r4, r9
 8001d6e:	eb13 0801 	adds.w	r8, r3, r1
 8001d72:	eb44 0902 	adc.w	r9, r4, r2
 8001d76:	4640      	mov	r0, r8
 8001d78:	4649      	mov	r1, r9
 8001d7a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001d7c:	685b      	ldr	r3, [r3, #4]
 8001d7e:	f04f 0400 	mov.w	r4, #0
 8001d82:	18db      	adds	r3, r3, r3
 8001d84:	eb44 0404 	adc.w	r4, r4, r4
 8001d88:	461a      	mov	r2, r3
 8001d8a:	4623      	mov	r3, r4
 8001d8c:	f7fe fa2e 	bl	80001ec <__aeabi_uldivmod>
 8001d90:	4603      	mov	r3, r0
 8001d92:	460c      	mov	r4, r1
 8001d94:	461a      	mov	r2, r3
 8001d96:	4b0c      	ldr	r3, [pc, #48]	; (8001dc8 <UART_SetConfig+0x354>)
 8001d98:	fba3 1302 	umull	r1, r3, r3, r2
 8001d9c:	095b      	lsrs	r3, r3, #5
 8001d9e:	2164      	movs	r1, #100	; 0x64
 8001da0:	fb01 f303 	mul.w	r3, r1, r3
 8001da4:	1ad3      	subs	r3, r2, r3
 8001da6:	00db      	lsls	r3, r3, #3
 8001da8:	3332      	adds	r3, #50	; 0x32
 8001daa:	4a07      	ldr	r2, [pc, #28]	; (8001dc8 <UART_SetConfig+0x354>)
 8001dac:	fba2 2303 	umull	r2, r3, r2, r3
 8001db0:	095b      	lsrs	r3, r3, #5
 8001db2:	f003 0307 	and.w	r3, r3, #7
 8001db6:	4433      	add	r3, r6
 8001db8:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8001dba:	6093      	str	r3, [r2, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8001dbc:	e192      	b.n	80020e4 <UART_SetConfig+0x670>
 8001dbe:	bf00      	nop
 8001dc0:	40011000 	.word	0x40011000
 8001dc4:	40011400 	.word	0x40011400
 8001dc8:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8001dcc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001dce:	681a      	ldr	r2, [r3, #0]
 8001dd0:	4bc1      	ldr	r3, [pc, #772]	; (80020d8 <UART_SetConfig+0x664>)
 8001dd2:	429a      	cmp	r2, r3
 8001dd4:	d005      	beq.n	8001de2 <UART_SetConfig+0x36e>
 8001dd6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001dd8:	681a      	ldr	r2, [r3, #0]
 8001dda:	4bc0      	ldr	r3, [pc, #768]	; (80020dc <UART_SetConfig+0x668>)
 8001ddc:	429a      	cmp	r2, r3
 8001dde:	f040 80bf 	bne.w	8001f60 <UART_SetConfig+0x4ec>
      pclk = HAL_RCC_GetPCLK2Freq();
 8001de2:	f7ff fde5 	bl	80019b0 <HAL_RCC_GetPCLK2Freq>
 8001de6:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8001dea:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001dec:	681e      	ldr	r6, [r3, #0]
 8001dee:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001df2:	4619      	mov	r1, r3
 8001df4:	f04f 0200 	mov.w	r2, #0
 8001df8:	460b      	mov	r3, r1
 8001dfa:	4614      	mov	r4, r2
 8001dfc:	18db      	adds	r3, r3, r3
 8001dfe:	eb44 0404 	adc.w	r4, r4, r4
 8001e02:	185b      	adds	r3, r3, r1
 8001e04:	eb44 0402 	adc.w	r4, r4, r2
 8001e08:	00e0      	lsls	r0, r4, #3
 8001e0a:	6278      	str	r0, [r7, #36]	; 0x24
 8001e0c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001e0e:	ea40 7053 	orr.w	r0, r0, r3, lsr #29
 8001e12:	6278      	str	r0, [r7, #36]	; 0x24
 8001e14:	00db      	lsls	r3, r3, #3
 8001e16:	623b      	str	r3, [r7, #32]
 8001e18:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8001e1c:	eb13 0801 	adds.w	r8, r3, r1
 8001e20:	eb44 0902 	adc.w	r9, r4, r2
 8001e24:	4640      	mov	r0, r8
 8001e26:	4649      	mov	r1, r9
 8001e28:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001e2a:	685b      	ldr	r3, [r3, #4]
 8001e2c:	f04f 0400 	mov.w	r4, #0
 8001e30:	00a2      	lsls	r2, r4, #2
 8001e32:	65fa      	str	r2, [r7, #92]	; 0x5c
 8001e34:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8001e36:	ea42 7293 	orr.w	r2, r2, r3, lsr #30
 8001e3a:	65fa      	str	r2, [r7, #92]	; 0x5c
 8001e3c:	009b      	lsls	r3, r3, #2
 8001e3e:	65bb      	str	r3, [r7, #88]	; 0x58
 8001e40:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8001e44:	f7fe f9d2 	bl	80001ec <__aeabi_uldivmod>
 8001e48:	4603      	mov	r3, r0
 8001e4a:	460c      	mov	r4, r1
 8001e4c:	461a      	mov	r2, r3
 8001e4e:	4ba4      	ldr	r3, [pc, #656]	; (80020e0 <UART_SetConfig+0x66c>)
 8001e50:	fba3 2302 	umull	r2, r3, r3, r2
 8001e54:	095b      	lsrs	r3, r3, #5
 8001e56:	011d      	lsls	r5, r3, #4
 8001e58:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001e5c:	4619      	mov	r1, r3
 8001e5e:	f04f 0200 	mov.w	r2, #0
 8001e62:	460b      	mov	r3, r1
 8001e64:	4614      	mov	r4, r2
 8001e66:	18db      	adds	r3, r3, r3
 8001e68:	eb44 0404 	adc.w	r4, r4, r4
 8001e6c:	185b      	adds	r3, r3, r1
 8001e6e:	eb44 0402 	adc.w	r4, r4, r2
 8001e72:	00e0      	lsls	r0, r4, #3
 8001e74:	61f8      	str	r0, [r7, #28]
 8001e76:	69f8      	ldr	r0, [r7, #28]
 8001e78:	ea40 7053 	orr.w	r0, r0, r3, lsr #29
 8001e7c:	61f8      	str	r0, [r7, #28]
 8001e7e:	00db      	lsls	r3, r3, #3
 8001e80:	61bb      	str	r3, [r7, #24]
 8001e82:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 8001e86:	eb13 0801 	adds.w	r8, r3, r1
 8001e8a:	eb44 0902 	adc.w	r9, r4, r2
 8001e8e:	4640      	mov	r0, r8
 8001e90:	4649      	mov	r1, r9
 8001e92:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001e94:	685b      	ldr	r3, [r3, #4]
 8001e96:	f04f 0400 	mov.w	r4, #0
 8001e9a:	00a2      	lsls	r2, r4, #2
 8001e9c:	657a      	str	r2, [r7, #84]	; 0x54
 8001e9e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001ea0:	ea42 7293 	orr.w	r2, r2, r3, lsr #30
 8001ea4:	657a      	str	r2, [r7, #84]	; 0x54
 8001ea6:	009b      	lsls	r3, r3, #2
 8001ea8:	653b      	str	r3, [r7, #80]	; 0x50
 8001eaa:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8001eae:	f7fe f99d 	bl	80001ec <__aeabi_uldivmod>
 8001eb2:	4603      	mov	r3, r0
 8001eb4:	460c      	mov	r4, r1
 8001eb6:	461a      	mov	r2, r3
 8001eb8:	4b89      	ldr	r3, [pc, #548]	; (80020e0 <UART_SetConfig+0x66c>)
 8001eba:	fba3 1302 	umull	r1, r3, r3, r2
 8001ebe:	095b      	lsrs	r3, r3, #5
 8001ec0:	2164      	movs	r1, #100	; 0x64
 8001ec2:	fb01 f303 	mul.w	r3, r1, r3
 8001ec6:	1ad3      	subs	r3, r2, r3
 8001ec8:	011b      	lsls	r3, r3, #4
 8001eca:	3332      	adds	r3, #50	; 0x32
 8001ecc:	4a84      	ldr	r2, [pc, #528]	; (80020e0 <UART_SetConfig+0x66c>)
 8001ece:	fba2 2303 	umull	r2, r3, r2, r3
 8001ed2:	095b      	lsrs	r3, r3, #5
 8001ed4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001ed8:	441d      	add	r5, r3
 8001eda:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001ede:	4619      	mov	r1, r3
 8001ee0:	f04f 0200 	mov.w	r2, #0
 8001ee4:	460b      	mov	r3, r1
 8001ee6:	4614      	mov	r4, r2
 8001ee8:	18db      	adds	r3, r3, r3
 8001eea:	eb44 0404 	adc.w	r4, r4, r4
 8001eee:	185b      	adds	r3, r3, r1
 8001ef0:	eb44 0402 	adc.w	r4, r4, r2
 8001ef4:	00e0      	lsls	r0, r4, #3
 8001ef6:	6178      	str	r0, [r7, #20]
 8001ef8:	6978      	ldr	r0, [r7, #20]
 8001efa:	ea40 7053 	orr.w	r0, r0, r3, lsr #29
 8001efe:	6178      	str	r0, [r7, #20]
 8001f00:	00db      	lsls	r3, r3, #3
 8001f02:	613b      	str	r3, [r7, #16]
 8001f04:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8001f08:	eb13 0801 	adds.w	r8, r3, r1
 8001f0c:	eb44 0902 	adc.w	r9, r4, r2
 8001f10:	4640      	mov	r0, r8
 8001f12:	4649      	mov	r1, r9
 8001f14:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001f16:	685b      	ldr	r3, [r3, #4]
 8001f18:	f04f 0400 	mov.w	r4, #0
 8001f1c:	00a2      	lsls	r2, r4, #2
 8001f1e:	64fa      	str	r2, [r7, #76]	; 0x4c
 8001f20:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001f22:	ea42 7293 	orr.w	r2, r2, r3, lsr #30
 8001f26:	64fa      	str	r2, [r7, #76]	; 0x4c
 8001f28:	009b      	lsls	r3, r3, #2
 8001f2a:	64bb      	str	r3, [r7, #72]	; 0x48
 8001f2c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8001f30:	f7fe f95c 	bl	80001ec <__aeabi_uldivmod>
 8001f34:	4603      	mov	r3, r0
 8001f36:	460c      	mov	r4, r1
 8001f38:	461a      	mov	r2, r3
 8001f3a:	4b69      	ldr	r3, [pc, #420]	; (80020e0 <UART_SetConfig+0x66c>)
 8001f3c:	fba3 1302 	umull	r1, r3, r3, r2
 8001f40:	095b      	lsrs	r3, r3, #5
 8001f42:	2164      	movs	r1, #100	; 0x64
 8001f44:	fb01 f303 	mul.w	r3, r1, r3
 8001f48:	1ad3      	subs	r3, r2, r3
 8001f4a:	011b      	lsls	r3, r3, #4
 8001f4c:	3332      	adds	r3, #50	; 0x32
 8001f4e:	4a64      	ldr	r2, [pc, #400]	; (80020e0 <UART_SetConfig+0x66c>)
 8001f50:	fba2 2303 	umull	r2, r3, r2, r3
 8001f54:	095b      	lsrs	r3, r3, #5
 8001f56:	f003 030f 	and.w	r3, r3, #15
 8001f5a:	442b      	add	r3, r5
 8001f5c:	60b3      	str	r3, [r6, #8]
 8001f5e:	e0c1      	b.n	80020e4 <UART_SetConfig+0x670>
      pclk = HAL_RCC_GetPCLK1Freq();
 8001f60:	f7ff fd12 	bl	8001988 <HAL_RCC_GetPCLK1Freq>
 8001f64:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8001f68:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	65bb      	str	r3, [r7, #88]	; 0x58
 8001f6e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001f72:	4619      	mov	r1, r3
 8001f74:	f04f 0200 	mov.w	r2, #0
 8001f78:	460b      	mov	r3, r1
 8001f7a:	4614      	mov	r4, r2
 8001f7c:	18db      	adds	r3, r3, r3
 8001f7e:	eb44 0404 	adc.w	r4, r4, r4
 8001f82:	185b      	adds	r3, r3, r1
 8001f84:	eb44 0402 	adc.w	r4, r4, r2
 8001f88:	00e6      	lsls	r6, r4, #3
 8001f8a:	ea46 7653 	orr.w	r6, r6, r3, lsr #29
 8001f8e:	00dd      	lsls	r5, r3, #3
 8001f90:	462b      	mov	r3, r5
 8001f92:	4634      	mov	r4, r6
 8001f94:	185d      	adds	r5, r3, r1
 8001f96:	eb44 0602 	adc.w	r6, r4, r2
 8001f9a:	4628      	mov	r0, r5
 8001f9c:	4631      	mov	r1, r6
 8001f9e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001fa0:	685b      	ldr	r3, [r3, #4]
 8001fa2:	f04f 0400 	mov.w	r4, #0
 8001fa6:	00a5      	lsls	r5, r4, #2
 8001fa8:	677d      	str	r5, [r7, #116]	; 0x74
 8001faa:	6f7d      	ldr	r5, [r7, #116]	; 0x74
 8001fac:	ea45 7593 	orr.w	r5, r5, r3, lsr #30
 8001fb0:	677d      	str	r5, [r7, #116]	; 0x74
 8001fb2:	009c      	lsls	r4, r3, #2
 8001fb4:	673c      	str	r4, [r7, #112]	; 0x70
 8001fb6:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8001fba:	f7fe f917 	bl	80001ec <__aeabi_uldivmod>
 8001fbe:	4603      	mov	r3, r0
 8001fc0:	460c      	mov	r4, r1
 8001fc2:	461a      	mov	r2, r3
 8001fc4:	4b46      	ldr	r3, [pc, #280]	; (80020e0 <UART_SetConfig+0x66c>)
 8001fc6:	fba3 1302 	umull	r1, r3, r3, r2
 8001fca:	095b      	lsrs	r3, r3, #5
 8001fcc:	011d      	lsls	r5, r3, #4
 8001fce:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001fd2:	4619      	mov	r1, r3
 8001fd4:	f04f 0200 	mov.w	r2, #0
 8001fd8:	460b      	mov	r3, r1
 8001fda:	4614      	mov	r4, r2
 8001fdc:	18db      	adds	r3, r3, r3
 8001fde:	eb44 0404 	adc.w	r4, r4, r4
 8001fe2:	185b      	adds	r3, r3, r1
 8001fe4:	eb44 0402 	adc.w	r4, r4, r2
 8001fe8:	00e0      	lsls	r0, r4, #3
 8001fea:	60f8      	str	r0, [r7, #12]
 8001fec:	68f8      	ldr	r0, [r7, #12]
 8001fee:	ea40 7053 	orr.w	r0, r0, r3, lsr #29
 8001ff2:	60f8      	str	r0, [r7, #12]
 8001ff4:	00d8      	lsls	r0, r3, #3
 8001ff6:	60b8      	str	r0, [r7, #8]
 8001ff8:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8001ffc:	eb13 0801 	adds.w	r8, r3, r1
 8002000:	eb44 0902 	adc.w	r9, r4, r2
 8002004:	4640      	mov	r0, r8
 8002006:	4649      	mov	r1, r9
 8002008:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800200a:	685b      	ldr	r3, [r3, #4]
 800200c:	f04f 0400 	mov.w	r4, #0
 8002010:	00a6      	lsls	r6, r4, #2
 8002012:	66fe      	str	r6, [r7, #108]	; 0x6c
 8002014:	6efe      	ldr	r6, [r7, #108]	; 0x6c
 8002016:	ea46 7693 	orr.w	r6, r6, r3, lsr #30
 800201a:	66fe      	str	r6, [r7, #108]	; 0x6c
 800201c:	009c      	lsls	r4, r3, #2
 800201e:	66bc      	str	r4, [r7, #104]	; 0x68
 8002020:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8002024:	f7fe f8e2 	bl	80001ec <__aeabi_uldivmod>
 8002028:	4603      	mov	r3, r0
 800202a:	460c      	mov	r4, r1
 800202c:	461a      	mov	r2, r3
 800202e:	4b2c      	ldr	r3, [pc, #176]	; (80020e0 <UART_SetConfig+0x66c>)
 8002030:	fba3 1302 	umull	r1, r3, r3, r2
 8002034:	095b      	lsrs	r3, r3, #5
 8002036:	2164      	movs	r1, #100	; 0x64
 8002038:	fb01 f303 	mul.w	r3, r1, r3
 800203c:	1ad3      	subs	r3, r2, r3
 800203e:	011b      	lsls	r3, r3, #4
 8002040:	3332      	adds	r3, #50	; 0x32
 8002042:	4a27      	ldr	r2, [pc, #156]	; (80020e0 <UART_SetConfig+0x66c>)
 8002044:	fba2 1303 	umull	r1, r3, r2, r3
 8002048:	095b      	lsrs	r3, r3, #5
 800204a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800204e:	441d      	add	r5, r3
 8002050:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002054:	4619      	mov	r1, r3
 8002056:	f04f 0200 	mov.w	r2, #0
 800205a:	460b      	mov	r3, r1
 800205c:	4614      	mov	r4, r2
 800205e:	18db      	adds	r3, r3, r3
 8002060:	eb44 0404 	adc.w	r4, r4, r4
 8002064:	185b      	adds	r3, r3, r1
 8002066:	eb44 0402 	adc.w	r4, r4, r2
 800206a:	00e0      	lsls	r0, r4, #3
 800206c:	6078      	str	r0, [r7, #4]
 800206e:	6878      	ldr	r0, [r7, #4]
 8002070:	ea40 7053 	orr.w	r0, r0, r3, lsr #29
 8002074:	6078      	str	r0, [r7, #4]
 8002076:	00d8      	lsls	r0, r3, #3
 8002078:	6038      	str	r0, [r7, #0]
 800207a:	e897 0018 	ldmia.w	r7, {r3, r4}
 800207e:	eb13 0801 	adds.w	r8, r3, r1
 8002082:	eb44 0902 	adc.w	r9, r4, r2
 8002086:	4640      	mov	r0, r8
 8002088:	4649      	mov	r1, r9
 800208a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800208c:	685b      	ldr	r3, [r3, #4]
 800208e:	f04f 0400 	mov.w	r4, #0
 8002092:	00a6      	lsls	r6, r4, #2
 8002094:	667e      	str	r6, [r7, #100]	; 0x64
 8002096:	6e7e      	ldr	r6, [r7, #100]	; 0x64
 8002098:	ea46 7693 	orr.w	r6, r6, r3, lsr #30
 800209c:	667e      	str	r6, [r7, #100]	; 0x64
 800209e:	009c      	lsls	r4, r3, #2
 80020a0:	663c      	str	r4, [r7, #96]	; 0x60
 80020a2:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 80020a6:	f7fe f8a1 	bl	80001ec <__aeabi_uldivmod>
 80020aa:	4603      	mov	r3, r0
 80020ac:	460c      	mov	r4, r1
 80020ae:	461a      	mov	r2, r3
 80020b0:	4b0b      	ldr	r3, [pc, #44]	; (80020e0 <UART_SetConfig+0x66c>)
 80020b2:	fba3 1302 	umull	r1, r3, r3, r2
 80020b6:	095b      	lsrs	r3, r3, #5
 80020b8:	2164      	movs	r1, #100	; 0x64
 80020ba:	fb01 f303 	mul.w	r3, r1, r3
 80020be:	1ad3      	subs	r3, r2, r3
 80020c0:	011b      	lsls	r3, r3, #4
 80020c2:	3332      	adds	r3, #50	; 0x32
 80020c4:	4a06      	ldr	r2, [pc, #24]	; (80020e0 <UART_SetConfig+0x66c>)
 80020c6:	fba2 1303 	umull	r1, r3, r2, r3
 80020ca:	095b      	lsrs	r3, r3, #5
 80020cc:	f003 030f 	and.w	r3, r3, #15
 80020d0:	442b      	add	r3, r5
 80020d2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80020d4:	6093      	str	r3, [r2, #8]
}
 80020d6:	e005      	b.n	80020e4 <UART_SetConfig+0x670>
 80020d8:	40011000 	.word	0x40011000
 80020dc:	40011400 	.word	0x40011400
 80020e0:	51eb851f 	.word	0x51eb851f
 80020e4:	bf00      	nop
 80020e6:	378c      	adds	r7, #140	; 0x8c
 80020e8:	46bd      	mov	sp, r7
 80020ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80020ee:	bf00      	nop

080020f0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 80020f0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002128 <LoopFillZerobss+0x14>
 
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80020f4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80020f6:	e003      	b.n	8002100 <LoopCopyDataInit>

080020f8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80020f8:	4b0c      	ldr	r3, [pc, #48]	; (800212c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80020fa:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80020fc:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80020fe:	3104      	adds	r1, #4

08002100 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8002100:	480b      	ldr	r0, [pc, #44]	; (8002130 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8002102:	4b0c      	ldr	r3, [pc, #48]	; (8002134 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8002104:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8002106:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8002108:	d3f6      	bcc.n	80020f8 <CopyDataInit>
  ldr  r2, =_sbss
 800210a:	4a0b      	ldr	r2, [pc, #44]	; (8002138 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800210c:	e002      	b.n	8002114 <LoopFillZerobss>

0800210e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800210e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8002110:	f842 3b04 	str.w	r3, [r2], #4

08002114 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8002114:	4b09      	ldr	r3, [pc, #36]	; (800213c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8002116:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8002118:	d3f9      	bcc.n	800210e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800211a:	f7fe fc63 	bl	80009e4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800211e:	f000 f811 	bl	8002144 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002122:	f7fe f9f7 	bl	8000514 <main>
  bx  lr    
 8002126:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8002128:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 800212c:	080021dc 	.word	0x080021dc
  ldr  r0, =_sdata
 8002130:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8002134:	2000000c 	.word	0x2000000c
  ldr  r2, =_sbss
 8002138:	2000000c 	.word	0x2000000c
  ldr  r3, = _ebss
 800213c:	200000ac 	.word	0x200000ac

08002140 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002140:	e7fe      	b.n	8002140 <ADC_IRQHandler>
	...

08002144 <__libc_init_array>:
 8002144:	b570      	push	{r4, r5, r6, lr}
 8002146:	4e0d      	ldr	r6, [pc, #52]	; (800217c <__libc_init_array+0x38>)
 8002148:	4c0d      	ldr	r4, [pc, #52]	; (8002180 <__libc_init_array+0x3c>)
 800214a:	1ba4      	subs	r4, r4, r6
 800214c:	10a4      	asrs	r4, r4, #2
 800214e:	2500      	movs	r5, #0
 8002150:	42a5      	cmp	r5, r4
 8002152:	d109      	bne.n	8002168 <__libc_init_array+0x24>
 8002154:	4e0b      	ldr	r6, [pc, #44]	; (8002184 <__libc_init_array+0x40>)
 8002156:	4c0c      	ldr	r4, [pc, #48]	; (8002188 <__libc_init_array+0x44>)
 8002158:	f000 f820 	bl	800219c <_init>
 800215c:	1ba4      	subs	r4, r4, r6
 800215e:	10a4      	asrs	r4, r4, #2
 8002160:	2500      	movs	r5, #0
 8002162:	42a5      	cmp	r5, r4
 8002164:	d105      	bne.n	8002172 <__libc_init_array+0x2e>
 8002166:	bd70      	pop	{r4, r5, r6, pc}
 8002168:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800216c:	4798      	blx	r3
 800216e:	3501      	adds	r5, #1
 8002170:	e7ee      	b.n	8002150 <__libc_init_array+0xc>
 8002172:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002176:	4798      	blx	r3
 8002178:	3501      	adds	r5, #1
 800217a:	e7f2      	b.n	8002162 <__libc_init_array+0x1e>
 800217c:	080021d4 	.word	0x080021d4
 8002180:	080021d4 	.word	0x080021d4
 8002184:	080021d4 	.word	0x080021d4
 8002188:	080021d8 	.word	0x080021d8

0800218c <memset>:
 800218c:	4402      	add	r2, r0
 800218e:	4603      	mov	r3, r0
 8002190:	4293      	cmp	r3, r2
 8002192:	d100      	bne.n	8002196 <memset+0xa>
 8002194:	4770      	bx	lr
 8002196:	f803 1b01 	strb.w	r1, [r3], #1
 800219a:	e7f9      	b.n	8002190 <memset+0x4>

0800219c <_init>:
 800219c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800219e:	bf00      	nop
 80021a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80021a2:	bc08      	pop	{r3}
 80021a4:	469e      	mov	lr, r3
 80021a6:	4770      	bx	lr

080021a8 <_fini>:
 80021a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80021aa:	bf00      	nop
 80021ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80021ae:	bc08      	pop	{r3}
 80021b0:	469e      	mov	lr, r3
 80021b2:	4770      	bx	lr
